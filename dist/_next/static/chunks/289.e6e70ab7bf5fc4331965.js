(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[289],{hgWd:function(e,n,t){"use strict";t.r(n);var o,a=t("q1tI"),r=t("o0o1"),l=t.n(r),s=t("HaE+"),i=(t("nX5y"),t("smsc")),p=t("ThKj"),u=t("rePB"),c=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("erxx"),t("mbJ9")),d=t.n(c),m=t("mXS1");function b(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function y(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?b(Object(t),!0).forEach((function(n){Object(u.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var w={Dashboard:{Tabs:[{Name:"Toolbars",Toolbars:["DemoButtons"]}],CustomToolbars:[{Name:"DemoButtons",Title:"Demo Buttons",ToolbarButtons:[{Name:"blueTheme",Caption:"Blue Rows Bold",ButtonStyle:{Variant:"text",Tone:"info"}},{Name:"greenTheme",Caption:"Green Rows Small Font",ButtonStyle:{Variant:"text",Tone:"success"}},{Name:"orangeTheme",Caption:"Orange Rows, Purple Italic Text",ButtonStyle:{Variant:"text",Tone:"warning"}}]}]},UserInterface:{RowStyles:[{Style:{ForeColor:"yellow",BackColor:"purple",FontWeight:"Bold",FontSize:"XSmall"},RowType:"All"}]}},g=function(){var e=Object(s.a)(l.a.mark((function e(n,t){var a;return l.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Row Style Demo",predefinedConfig:w,vendorGrid:y(y({},{columnDefs:n,rowData:t,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0}}),{},{modules:m.a})},e.next=4,d.a.init(a);case 4:return(o=e.sent).eventApi.on("ToolbarButtonClicked",(function(e){switch(e.data[0].id.toolbarButton.Name){case"blueTheme":o.userInterfaceApi.setRowStyles([{RowType:"All",Style:{BackColor:"lightBlue",FontWeight:"Bold"}}]);break;case"greenTheme":o.userInterfaceApi.setRowStyles([{RowType:"All",Style:{BackColor:"lightGreen",FontSize:"XSmall"}}]);break;case"orangeTheme":o.userInterfaceApi.setRowStyles([{RowType:"All",Style:{BackColor:"orange",ForeColor:"purple",FontStyle:"Italic"}}])}})),e.abrupt("return",{adaptableOptions:a,adaptableApi:o});case 7:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),f=Object(s.a)(l.a.mark((function e(){var n,t,o,a,r;return l.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new p.a).setUpAgGridLicence(),t=JSON.parse(JSON.stringify(i)),n.convertExcelData(t),o=n.getPercentBarNorthwindColumnSchema(),e.next=7,g(o,t);case 7:return a=e.sent,r=a.adaptableOptions,a.adaptableApi,r.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport './rowstyle.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    Tabs: [\n      {\n        Name: 'Toolbars',\n        Toolbars: ['DemoButtons'],\n      },\n    ],\n    CustomToolbars: [\n      {\n        Name: 'DemoButtons',\n        Title: 'Demo Buttons',\n        ToolbarButtons: [\n          {\n            Name: 'blueTheme',\n            Caption: 'Blue Rows Bold',\n            ButtonStyle: {\n              Variant: 'text',\n              Tone: 'info',\n            },\n          },\n          {\n            Name: 'greenTheme',\n            Caption: 'Green Rows Small Font',\n            ButtonStyle: {\n              Variant: 'text',\n              Tone: 'success',\n            },\n          },\n          {\n            Name: 'orangeTheme',\n            Caption: 'Orange Rows, Purple Italic Text',\n            ButtonStyle: {\n              Variant: 'text',\n              Tone: 'warning',\n            },\n          },\n        ],\n      },\n    ],\n  },\n  UserInterface: {\n    RowStyles: [\n      // Use this if you want to style ALL rows\n      // As with all our Styles you can either use some properties or a cssClassName\n      {\n        Style: {\n          ForeColor: 'yellow',\n          BackColor: 'purple',\n          FontWeight: 'Bold',\n          FontSize: 'XSmall',\n          // ClassName: 'allRowStyle', // giving a classname\n        },\n        RowType: 'All',\n      },\n      /*\n      {\n        // For even row style we are going to reference just a class name (this css class is in the imported 'rowstyle.css')\n        // the css looks like this:\n        /*\n        .evenRowStyle {\n          background: lightyellow !important;\n          color: brown;\n          font-weight: normal !important;\n          font-style: bold !important;\n        }         \n       \n        Style: {\n          ClassName: 'evenRowStyle',\n        },\n        RowType: 'Even',\n      },\n      {\n        // For odd rows we will create the style ourselvves\n        Style: {\n          ForeColor: 'lightyellow',\n          BackColor: 'brown',\n          FontStyle: 'Italic',\n          FontWeight: 'Bold',\n        },\n        RowType: 'Odd',\n      }, */\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Row Style Demo',\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  adaptableApi.eventApi.on(\n    'ToolbarButtonClicked',\n    toolbarButtonClickedEventArgs => {\n      switch (toolbarButtonClickedEventArgs.data[0].id.toolbarButton.Name) {\n        case 'blueTheme':\n          adaptableApi.userInterfaceApi.setRowStyles([\n            {\n              RowType: 'All',\n              Style: {\n                BackColor: 'lightBlue',\n                FontWeight: 'Bold',\n              },\n            },\n          ]);\n          break;\n        case 'greenTheme':\n          adaptableApi.userInterfaceApi.setRowStyles([\n            {\n              RowType: 'All',\n              Style: {\n                BackColor: 'lightGreen',\n                FontSize: 'XSmall',\n              },\n            },\n          ]);\n          break;\n        case 'orangeTheme':\n          adaptableApi.userInterfaceApi.setRowStyles([\n            {\n              RowType: 'All',\n              Style: {\n                BackColor: 'orange',\n                ForeColor: 'purple',\n                FontStyle: 'Italic',\n              },\n            },\n          ]);\n          break;\n      }\n    }\n  );\n  return { adaptableOptions, adaptableApi };\n};\n"});case 12:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(a.useEffect)((function(){f().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);