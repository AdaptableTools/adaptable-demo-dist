(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[220],{uGtW:function(e,n,t){"use strict";t.r(n);var a,o=t("q1tI"),r=t("o0o1"),i=t.n(r),l=t("HaE+"),s=(t("nX5y"),t("smsc")),d=t("ThKj"),u=t("rePB"),c=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("mbJ9")),p=t.n(c),m=t("mXS1");function C(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?C(Object(t),!0).forEach((function(n){Object(u.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):C(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var g=["adaptableStateKey-demo1","adaptableStateKey-demo2"].map((function(e){return"".concat(e)})),y=g[0],f=function(){return y===g[0]?"First view":"Second view"},w={Dashboard:{VisibleButtons:["Dashboard","Layout"],Tabs:[{Name:"Toolbars",Toolbars:["Query","Alert","Layout"]}],CustomButtons:[{Name:"ChangeView",Caption:"Click to toggle the View ",ButtonStyle:{Variant:"raised",Tone:"neutral"}},{Name:"clear",Caption:"Clear Views State"}]},QuickSearch:{QuickSearchText:"Ha"},Layout:{CurrentLayout:"View1 Layout",Layouts:[{Columns:["OrderId","ChangeLastOrder","CompanyName","InvoicedCost","PackageCost","ItemCost","ItemCount","ContactName","Employee","OrderCost"],Name:"View1 Layout"}]},FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["PackageCost"]},Style:{FontWeight:"Bold",FontSize:"XSmall",FontStyle:"Italic"},DisplayFormat:{Formatter:"NumberFormatter",Options:{Parentheses:!0,IntegerDigits:3}},CellAlignment:"Center"},{Scope:{ColumnIds:["ItemCount"]},Style:{BackColor:"#d4fb79",ForeColor:"#8b0000",FontWeight:"Bold"}}]},GradientColumn:{GradientColumns:[{ColumnId:"ChangeLastOrder",NegativeValue:-41,PositiveValue:56,NegativeColor:"#FF0000",PositiveColor:"#00CC00",BaseValue:0}]},PercentBar:{PercentBars:[{ColumnId:"InvoicedCost",Ranges:[{Min:0,Max:500,Color:"#ff0000"},{Min:500,Max:1e3,Color:"#ffa500"},{Min:1e3,Max:3e3,Color:"#008000"}],ShowValue:!1}]}},h={Dashboard:{HomeToolbarTitle:f(),VisibleButtons:["Dashboard","Layout","GradientColumn","FormatColumn"],Tabs:[{Name:"Toolbars",Toolbars:["Export","Layout","CellSummary"]}],CustomButtons:[{Name:"ChangeView",Caption:"Click to toggle the View ",ButtonStyle:{Variant:"raised",Tone:"neutral"}}]},QuickSearch:{QuickSearchText:"st"},Layout:{CurrentLayout:"View2 Layout",Layouts:[{Name:"View2 Layout",Columns:["Employee","InvoicedCost","ChangeLastOrder","OrderCost","PackageCost"]}]},FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["PackageCost"]},Style:{FontSize:"Large",ForeColor:"red",BackColor:"blue",FontStyle:"Italic"},DisplayFormat:{Formatter:"NumberFormatter",Options:{Parentheses:!0,IntegerDigits:3}},CellAlignment:"Center"},{Scope:{ColumnIds:["OrderCost"]},Style:{BackColor:"orange",ForeColor:"green",FontStyle:"Italic"}}]}},v=function(){var e=Object(l.a)(i.a.mark((function e(n,t){var o,r;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o={columnDefs:n,rowData:t,sideBar:!0,suppressMenuHide:!0},r={primaryKey:"OrderId",userName:"Demo User",adaptableId:f(),adaptableStateKey:y,stateOptions:{applyState:function(e){return console.log("loading view id",e.viewId),delete e.viewId,e},saveState:function(e,n){var t=n.adaptableStateKey,a=e;return a.viewId=t,console.log("saving view id",t),a}},predefinedConfig:w,vendorGrid:b(b({},o),{},{modules:m.a})},e.next=4,p.a.init(r);case 4:return(a=e.sent).eventApi.on("AdaptableReady",S((function(e){var n=e.vendorGrid;console.log("Adaptable Ready was called - should only happen once"),setTimeout((function(){var e;null===(e=n.api)||void 0===e||e.setRowData(t)}),500)}))),a.eventApi.on("DashboardButtonClicked",(function(e){if("clear"==e.data[0].id.dashboardButton.Name&&(localStorage.clear(),window.location.href=window.location.href),"ChangeView"==e.data[0].id.dashboardButton.Name){var n=(y=y===g[0]?g[1]:g[0])===g[0]?w:h;a.configApi.setAdaptableStateKey(y,{predefinedConfig:n}).then((function(){a.dashboardApi.setHomeToolbarTitle(f())}))}})),e.abrupt("return",{adaptableOptions:r,adaptableApi:a});case 8:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),S=function(e){var n,t=!1;return function(){if(t)return n;t=!0,n=e.apply(void 0,arguments)}},O=Object(l.a)(i.a.mark((function e(){var n,t,a,o,r;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new d.a).setUpAgGridLicence(),t=JSON.parse(JSON.stringify(s)),n.convertExcelData(t),a=n.getBasicNorthwindColumnSchema(),e.next=7,v(a,t);case 7:return o=e.sent,r=o.adaptableOptions,o.adaptableApi,r.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n  DashboardButtonClickedEventArgs,\n  AdaptableState,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\n// Create 2 views and set Current View to first\nconst views = ['adaptableStateKey-demo1', 'adaptableStateKey-demo2'].map(\n  x => `${x}`\n);\nlet currentView = views[0];\n\n// Set the Adaptable Toolbar title to the Current View\nconst getToolbarTitle = () => {\n  return currentView === views[0] ? 'First view' : 'Second view';\n};\n\n// Create config for View1 - with some format columns, percent bar and gradient column\nconst view1Config: PredefinedConfig = {\n  Dashboard: {\n    VisibleButtons: ['Dashboard', 'Layout'],\n    Tabs: [\n      {\n        Name: 'Toolbars',\n        Toolbars: ['Query', 'Alert', 'Layout'],\n      },\n    ],\n    CustomButtons: [\n      {\n        Name: 'ChangeView',\n        Caption: 'Click to toggle the View ',\n        ButtonStyle: {\n          Variant: 'raised',\n          Tone: 'neutral',\n        },\n      },\n      {\n        Name: 'clear',\n        Caption: 'Clear Views State',\n      },\n    ],\n  },\n  // For view1 we will search on 'Ha'\n  QuickSearch: {\n    QuickSearchText: 'Ha',\n  },\n  Layout: {\n    CurrentLayout: 'View1 Layout',\n    Layouts: [\n      {\n        Columns: [\n          'OrderId',\n          'ChangeLastOrder',\n          'CompanyName',\n          'InvoicedCost',\n          'PackageCost',\n          'ItemCost',\n          'ItemCount',\n          'ContactName',\n          'Employee',\n          'OrderCost',\n        ],\n        Name: 'View1 Layout',\n      },\n    ],\n  },\n  // Add Formats for PackageCost and ItemCount\n  FormatColumn: {\n    FormatColumns: [\n      {\n        Scope: {\n          ColumnIds: ['PackageCost'],\n        },\n        Style: {\n          FontWeight: 'Bold',\n          FontSize: 'XSmall',\n          FontStyle: 'Italic',\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            Parentheses: true,\n            IntegerDigits: 3,\n          },\n        },\n        CellAlignment: 'Center',\n      },\n      {\n        Scope: {\n          ColumnIds: ['ItemCount'],\n        },\n        Style: {\n          BackColor: '#d4fb79',\n          ForeColor: '#8b0000',\n          FontWeight: 'Bold',\n        },\n      },\n    ],\n  },\n  GradientColumn: {\n    GradientColumns: [\n      {\n        ColumnId: 'ChangeLastOrder',\n        NegativeValue: -41,\n        PositiveValue: 56,\n        NegativeColor: '#FF0000',\n        PositiveColor: '#00CC00',\n        BaseValue: 0,\n      },\n    ],\n  },\n  PercentBar: {\n    PercentBars: [\n      {\n        ColumnId: 'InvoicedCost',\n        Ranges: [\n          { Min: 0, Max: 500, Color: '#ff0000' },\n          { Min: 500, Max: 1000, Color: '#ffa500' },\n          { Min: 1000, Max: 3000, Color: '#008000' },\n        ],\n        ShowValue: false,\n      },\n    ],\n  },\n} as PredefinedConfig;\n\n// Create a second Config for View2 - this will contain DIFFERENT state to that for View1 Config\nconst view2Config: PredefinedConfig = {\n  Dashboard: {\n    HomeToolbarTitle: getToolbarTitle(),\n    VisibleButtons: ['Dashboard', 'Layout', 'GradientColumn', 'FormatColumn'],\n    Tabs: [\n      {\n        Name: 'Toolbars',\n        Toolbars: ['Export', 'Layout', 'CellSummary'],\n      },\n    ],\n    CustomButtons: [\n      {\n        Name: 'ChangeView',\n        Caption: 'Click to toggle the View ',\n        ButtonStyle: {\n          Variant: 'raised',\n          Tone: 'neutral',\n        },\n      },\n    ],\n  },\n  // For view2 we will search on st\n  QuickSearch: {\n    QuickSearchText: 'st',\n  },\n  Layout: {\n    CurrentLayout: 'View2 Layout',\n    Layouts: [\n      {\n        Name: 'View2 Layout',\n        Columns: [\n          'Employee',\n          'InvoicedCost',\n          'ChangeLastOrder',\n          'OrderCost',\n          'PackageCost',\n        ],\n      },\n    ],\n  },\n  // Second config will have differeent format for PackageCost than View1 and one for OrderCost\n  FormatColumn: {\n    FormatColumns: [\n      {\n        Scope: {\n          ColumnIds: ['PackageCost'],\n        },\n        Style: {\n          FontSize: 'Large',\n          ForeColor: 'red',\n          BackColor: 'blue',\n          FontStyle: 'Italic',\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            Parentheses: true,\n            IntegerDigits: 3,\n          },\n        },\n        CellAlignment: 'Center',\n      },\n      {\n        Scope: {\n          ColumnIds: ['OrderCost'],\n        },\n        Style: {\n          BackColor: 'orange',\n          ForeColor: 'green',\n          FontStyle: 'Italic',\n        },\n      },\n    ],\n  },\n};\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    sideBar: true,\n    suppressMenuHide: true,\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: getToolbarTitle(),\n    // Set the adaptableStateKey to the Current view (instead of default which is 'adaptableId')\n    adaptableStateKey: currentView,\n    // We use the StateOptions functions to demonstrate how the ViewId can be persisted and reloaded\n    stateOptions: {\n      applyState: state => {\n        console.log('loading view id', state.viewId);\n        delete state.viewId;\n        return state;\n      },\n      saveState: (state: AdaptableState, { adaptableStateKey }) => {\n        const result: any = state;\n        result.viewId = adaptableStateKey;\n        console.log('saving view id', adaptableStateKey);\n        return result;\n      },\n    },\n    predefinedConfig: view1Config, // start off with View1 config\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  // We wrap the 'AdaptableReady' event in a once method to ensure it does not called each time the view reloads\n  adaptableApi.eventApi.on(\n    'AdaptableReady',\n    once(({ vendorGrid }: { vendorGrid: GridOptions }) => {\n      console.log('Adaptable Ready was called - should only happen once');\n      setTimeout(() => {\n        vendorGrid.api?.setRowData(rowData);\n      }, 500);\n    })\n  );\n\n  adaptableApi.eventApi.on(\n    'DashboardButtonClicked',\n    (dashboardButtonClickedEventArgs: DashboardButtonClickedEventArgs) => {\n      if (\n        dashboardButtonClickedEventArgs.data[0].id.dashboardButton.Name ==\n        'clear'\n      ) {\n        localStorage.clear();\n        window.location.href = window.location.href;\n      }\n      if (\n        dashboardButtonClickedEventArgs.data[0].id.dashboardButton.Name ==\n        'ChangeView'\n      ) {\n        currentView = currentView === views[0] ? views[1] : views[0];\n\n        let currentConfig =\n          currentView === views[0] ? view1Config : view2Config;\n\n        adaptableApi.configApi\n          .setAdaptableStateKey(currentView, {\n            predefinedConfig: currentConfig,\n          })\n          .then(() => {\n            adaptableApi.dashboardApi.setHomeToolbarTitle(getToolbarTitle());\n          });\n      }\n    }\n  );\n\n  return { adaptableOptions, adaptableApi };\n};\n\nconst once = (fn: any) => {\n  let result: any;\n  let called = false;\n  return (...args: any[]) => {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn(...args);\n  };\n};\n"});case 12:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(o.useEffect)((function(){O().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);