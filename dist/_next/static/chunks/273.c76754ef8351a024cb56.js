(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[273],{QR55:function(e,n,t){"use strict";t.r(n);var a,o=t("q1tI"),r=t("o0o1"),s=t.n(r),i=t("HaE+"),u=(t("nX5y"),t("smsc")),l=t("ThKj"),c=t("rePB"),d=(t("PMha"),t("5TJ6"),t("jWP/"),t("mbJ9")),m=t.n(d),p=t("mXS1");function f(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?f(Object(t),!0).forEach((function(n){Object(c.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):f(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var S={Dashboard:{Tabs:[{Name:"Toolbars",Toolbars:["QuickSearch","SystemStatus"]}]},SystemStatus:{ShowAlert:!1},UserInterface:{ContextMenuItems:[{Label:"New Conditional Style",UserMenuItemClickedFunction:"newConditionalStyle"},{Label:"Float Dashboard",UserMenuItemClickedFunction:"floatDashboard",UserMenuItemShowPredicate:"isColumnSortable"},{Label:"Set System Status",SubMenuItems:[{Label:"Set Error",UserMenuItemClickedFunction:"setError"},{Label:"Set Warning",UserMenuItemClickedFunction:"setWarning"},{Label:"Set Success",UserMenuItemClickedFunction:"setSuccess"},{Label:"Set Info",UserMenuItemClickedFunction:"setInfo"}]}]}},h=function(){var e=Object(i.a)(s.a.mark((function e(n,t){var o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Context Menu Demo",userInterfaceOptions:{showAdaptableContextMenu:function(e,n){return"GridInfo"!==e.FunctionName&&(("Employee"!==n.Column.ColumnId||"Filter"!==e.FunctionName)&&"ContactName"!==n.Column.ColumnId)}},userFunctions:[{type:"UserMenuItemClickedFunction",name:"newConditionalStyle",handler:function(){a.conditionalStyleApi.showConditionalStylePopup()}},{type:"UserMenuItemClickedFunction",name:"floatDashboard",handler:function(){a.dashboardApi.floatDashboard()}},{type:"UserMenuItemClickedFunction",name:"setError",handler:function(){a.systemStatusApi.setErrorSystemStatus("System Down")}},{type:"UserMenuItemClickedFunction",name:"setWarning",handler:function(){a.systemStatusApi.setWarningSystemStatus("System Slow")}},{type:"UserMenuItemClickedFunction",name:"setSuccess",handler:function(){a.systemStatusApi.setSuccessSystemStatus("System Fine")}},{type:"UserMenuItemClickedFunction",name:"setInfo",handler:function(){a.systemStatusApi.setInfoSystemStatus("Demos working fine")}},{type:"UserMenuItemShowPredicate",name:"isColumnSortable",handler:function(e){return e.Column.Sortable}}],predefinedConfig:S,vendorGrid:b(b({},{columnDefs:n,rowData:t,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0}}),{},{modules:p.a})},e.next=4,m.a.init(o);case 4:return a=e.sent,e.abrupt("return",{adaptableOptions:o,adaptableApi:a});case 6:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),y=Object(i.a)(s.a.mark((function e(){var n,t,a,o,r;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new l.a).setUpAgGridLicence(),t=JSON.parse(JSON.stringify(u)),n.convertExcelData(t),a=n.getBasicNorthwindColumnSchema(),e.next=7,h(a,t);case 7:return o=e.sent,r=o.adaptableOptions,o.adaptableApi,r.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n  AdaptableMenuItem,\n  MenuInfo,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    Tabs: [\n      {\n        Name: 'Toolbars',\n        Toolbars: ['QuickSearch', 'SystemStatus'],\n      },\n    ],\n  },\n  SystemStatus: {\n    ShowAlert: false,\n  },\n  UserInterface: {\n    // Add the context menu items here\n    // Note: we only provide the names of the 'ShowPredicate' and 'Clicked' functions here;\n    // The actual implemetnation is in 'userFunctions' section of Adaptable Options\n    ContextMenuItems: [\n      // A 'UserMenuItem' referencing the name of the Function to be called when it is clicked\n      {\n        Label: 'New Conditional Style',\n        UserMenuItemClickedFunction: 'newConditionalStyle',\n      },\n      // This 'UserMenuItem' includes a Predicate Function to decide if the item should be shown\n      {\n        Label: 'Float Dashboard',\n        UserMenuItemClickedFunction: 'floatDashboard',\n        UserMenuItemShowPredicate: 'isColumnSortable',\n      },\n      // This 'UserMenuItem' includes a set of menu items which will show as a sub menu\n      {\n        Label: 'Set System Status',\n        SubMenuItems: [\n          {\n            Label: 'Set Error',\n            UserMenuItemClickedFunction: 'setError',\n          },\n          {\n            Label: 'Set Warning',\n            UserMenuItemClickedFunction: 'setWarning',\n          },\n          {\n            Label: 'Set Success',\n            UserMenuItemClickedFunction: 'setSuccess',\n          },\n          {\n            Label: 'Set Info',\n            UserMenuItemClickedFunction: 'setInfo',\n          },\n        ],\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Context Menu Demo',\n    // This 'showAdaptableContextMenu' function is run to decide IF the context menu should be shown\n    // The 'MenuInfo' object it receives provides the full cell / column context to assist this decision\n    userInterfaceOptions: {\n      showAdaptableContextMenu: (\n        menuItem: AdaptableMenuItem,\n        menuInfo: MenuInfo\n      ) => {\n        // Never display the 'ShowGridInfo' context menu option\n        if (menuItem.FunctionName === 'GridInfo') {\n          return false;\n        }\n        // Don't display the 'Filter' context menu option for in the Employee column\n        if (\n          menuInfo.Column.ColumnId === 'Employee' &&\n          menuItem.FunctionName === 'Filter'\n        ) {\n          return false;\n        }\n        // Dont show any of the shipped Context Menu items for the Contact column\n        if (menuInfo.Column.ColumnId === 'ContactName') {\n          return false;\n        }\n        return true;\n      },\n    },\n    // These are the actual implementations for the the the 'ShowPredicate' and 'Clicked' functions\n    // The names of the functions are provided in the ContextMenuItems property of User Interface section of Predefined config\n    userFunctions: [\n      {\n        type: 'UserMenuItemClickedFunction',\n        name: 'newConditionalStyle',\n        handler() {\n          adaptableApi.conditionalStyleApi.showConditionalStylePopup();\n        },\n      },\n      {\n        type: 'UserMenuItemClickedFunction',\n        name: 'floatDashboard',\n        handler() {\n          adaptableApi.dashboardApi.floatDashboard();\n        },\n      },\n      {\n        type: 'UserMenuItemClickedFunction',\n        name: 'setError',\n        handler() {\n          adaptableApi.systemStatusApi.setErrorSystemStatus('System Down');\n        },\n      },\n      {\n        type: 'UserMenuItemClickedFunction',\n        name: 'setWarning',\n        handler() {\n          adaptableApi.systemStatusApi.setWarningSystemStatus('System Slow');\n        },\n      },\n      {\n        type: 'UserMenuItemClickedFunction',\n        name: 'setSuccess',\n        handler() {\n          adaptableApi.systemStatusApi.setSuccessSystemStatus('System Fine');\n        },\n      },\n      {\n        type: 'UserMenuItemClickedFunction',\n        name: 'setInfo',\n        handler() {\n          adaptableApi.systemStatusApi.setInfoSystemStatus(\n            'Demos working fine'\n          );\n        },\n      },\n      {\n        type: 'UserMenuItemShowPredicate',\n        name: 'isColumnSortable',\n        handler(menuInfo) {\n          return menuInfo.Column.Sortable;\n        },\n      },\n    ],\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 12:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(o.useEffect)((function(){y().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);