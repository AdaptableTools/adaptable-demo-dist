(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[288],{"9rMJ":function(e,n,a){"use strict";a.r(n);var t,o=a("q1tI"),r=a("o0o1"),s=a.n(r),l=a("HaE+"),i=(a("nX5y"),a("smsc")),u=a("ThKj"),d=a("rePB"),c=(a("PMha"),a("cUqQ"),a("5TJ6"),a("jWP/"),a("iMsr"),a("mbJ9")),p=a.n(c),m=a("mXS1");function C(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function f(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?C(Object(a),!0).forEach((function(n){Object(d.a)(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):C(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}var b={Dashboard:{VisibleButtons:["PercentBar"]},PercentBar:{PercentBars:[{ColumnId:"InvoicedCost",Ranges:[{Min:0,Max:500,Color:"#ff0000"},{Min:500,Max:1e3,Color:"#ffa500"},{Min:1e3,Max:3e3,Color:"#008000"}],ShowValue:!1},{BackColor:"#d3d3d3",ColumnId:"ItemCost",DisplayPercentageValue:!0,DisplayRawValue:!0,Ranges:[{Min:0,Max:199.46,Color:"#87cefa"}],ShowValue:!0},{BackColor:"#808080",ColumnId:"ItemCount",DisplayRawValue:!0,Ranges:[{Min:0,Max:21,Color:"#006400"}],ShowToolTip:!0,ShowValue:!1},{ColumnId:"PackageCost",ColumnComparison:{MinValue:0,MaxValue:"OrderCost",Color:"#D2691E"}}]},Layout:{CurrentLayout:"Percent Bar Layout",Layouts:[{Name:"Percent Bar Layout",Columns:["OrderId","ItemCount","CustomerReference","InvoicedCost","ContactName","ItemCost","PackageCost","OrderCost","CompanyName","ChangeLastOrder","OrderDate"]}]}},g=function(){var e=Object(l.a)(s.a.mark((function e(n,a){var o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Percent Bar Demo",predefinedConfig:b,vendorGrid:f(f({},{columnDefs:n,rowData:a,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0}}),{},{modules:m.a})},e.next=4,p.a.init(o);case 4:return t=e.sent,e.abrupt("return",{adaptableOptions:o,adaptableApi:t});case 6:case"end":return e.stop()}}),e)})));return function(n,a){return e.apply(this,arguments)}}(),y=Object(l.a)(s.a.mark((function e(){var n,a,t,o,r;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new u.a).setUpAgGridLicence(),a=JSON.parse(JSON.stringify(i)),n.convertExcelData(a),(t=n.getPercentBarNorthwindColumnSchema()).forEach((function(e){"number-cell"==e.cellClass&&(e.cellClass="number-cell-changed")})),e.next=8,g(t,a);case 8:return o=e.sent,r=o.adaptableOptions,o.adaptableApi,r.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    VisibleButtons: ['PercentBar'],\n  },\n  PercentBar: {\n    PercentBars: [\n      {\n        ColumnId: 'InvoicedCost',\n        Ranges: [\n          { Min: 0, Max: 500, Color: '#ff0000' },\n          { Min: 500, Max: 1000, Color: '#ffa500' },\n          { Min: 1000, Max: 3000, Color: '#008000' },\n        ],\n        ShowValue: false,\n      },\n      {\n        BackColor: '#d3d3d3',\n        ColumnId: 'ItemCost',\n        DisplayPercentageValue: true,\n        DisplayRawValue: true,\n        Ranges: [{ Min: 0, Max: 199.46, Color: '#87cefa' }],\n        ShowValue: true,\n      },\n      {\n        BackColor: '#808080',\n        ColumnId: 'ItemCount',\n        DisplayRawValue: true,\n        Ranges: [{ Min: 0, Max: 21, Color: '#006400' }],\n        ShowToolTip: true,\n        ShowValue: false,\n      },\n      {\n        ColumnId: 'PackageCost',\n        ColumnComparison: {\n          MinValue: 0,\n          MaxValue: 'OrderCost',\n          Color: '#D2691E',\n        },\n      },\n    ],\n  },\n  Layout: {\n    CurrentLayout: 'Percent Bar Layout',\n    Layouts: [\n      {\n        Name: 'Percent Bar Layout',\n        Columns: [\n          'OrderId',\n          'ItemCount',\n          'CustomerReference',\n          'InvoicedCost',\n          'ContactName',\n          'ItemCost',\n          'PackageCost',\n          'OrderCost',\n          'CompanyName',\n          'ChangeLastOrder',\n          'OrderDate',\n        ],\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Percent Bar Demo',\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 13:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(o.useEffect)((function(){y().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);