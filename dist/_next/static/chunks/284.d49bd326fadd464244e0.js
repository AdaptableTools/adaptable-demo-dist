(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[284],{HxsX:function(e,t,n){"use strict";n.r(t);var r,a=n("q1tI"),o=n("o0o1"),i=n.n(o),s=n("HaE+"),d=(n("nX5y"),n("smsc")),l=n("ThKj"),m=n("rePB"),p=(n("PMha"),n("cUqQ"),n("5TJ6"),n("jWP/"),n("iMsr"),n("mbJ9")),u=n.n(p),c=n("mXS1");function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){Object(m.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var y={Dashboard:{VisibleButtons:["FormatColumn"]},FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["OrderId"]},Style:{BackColor:"#d4fb79",ForeColor:"#8b0000"}},{Scope:{ColumnIds:["LastUpdatedTime"]},DisplayFormat:{Formatter:"DateFormatter",Options:{Pattern:"HH:mm:ss"}}},{Scope:{ColumnIds:["OrderDate"]},Style:{FontWeight:"Bold",FontSize:"XSmall",FontStyle:"Italic"},DisplayFormat:{Formatter:"DateFormatter",Options:{Pattern:"yyyyMMdd"}}},{Scope:{ColumnIds:["ChangeLastOrder"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{Parentheses:!0}}},{Scope:{ColumnIds:["InvoicedCost"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{FractionDigits:2,Prefix:"\xa3"}}},{Scope:{ColumnIds:["OrderCost"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{FractionDigits:2,IntegerSeparator:" ",Prefix:"$",Suffix:"(AUD)"}}}]},UserInterface:{PermittedValuesItems:[{Scope:{ColumnIds:["LastUpdatedTime"]},PermittedValues:[""]}]}},F=function(){var e=Object(s.a)(i.a.mark((function e(t,n){var a;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Format Col Demo",predefinedConfig:y,vendorGrid:b(b({},{columnDefs:t,rowData:n,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0}}),{},{modules:c.a})},e.next=4,u.a.init(a);case 4:return r=e.sent,e.abrupt("return",{adaptableOptions:a,adaptableApi:r});case 6:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),O=Object(s.a)(i.a.mark((function e(){var t,n,r,a,o,s,m,p,u;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new l.a).setUpAgGridLicence(),n=JSON.parse(JSON.stringify(d)),t.convertExcelData(n),r=t.getFullNorthwindColumnSchema(),(a=r.find((function(e){return"OrderDate"==e.field})))&&(a.valueFormatter=void 0,a.cellRenderer=void 0),(o=r.find((function(e){return"InvoicedCost"==e.field})))&&(o.valueFormatter=void 0,o.cellRenderer=void 0),(s=r.find((function(e){return"OrderCost"==e.field})))&&(s.valueFormatter=void 0,s.cellRenderer=void 0),(m=r.find((function(e){return"LastUpdatedTime"==e.field})))&&(m.valueFormatter=void 0,m.cellRenderer=void 0),e.next=15,F(r,n);case 15:return p=e.sent,u=p.adaptableOptions,p.adaptableApi,u.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    VisibleButtons: ['FormatColumn'],\n  },\n  FormatColumn: {\n    FormatColumns: [\n      // Set a Style for OrderId\n      {\n        Scope: {\n          ColumnIds: ['OrderId'],\n        },\n        Style: {\n          BackColor: '#d4fb79',\n          ForeColor: '#8b0000',\n        },\n      },\n      // Set a Time-based Display Format for LastUpdatedTime\n      {\n        Scope: {\n          ColumnIds: ['LastUpdatedTime'],\n        },\n        DisplayFormat: {\n          Formatter: 'DateFormatter',\n          Options: {\n            Pattern: 'HH:mm:ss',\n          },\n        },\n      },\n      // Set both a Style and a (Date-based) Display Format for OrderDate\n      {\n        Scope: {\n          ColumnIds: ['OrderDate'],\n        },\n        Style: {\n          FontWeight: 'Bold',\n          FontSize: 'XSmall',\n          FontStyle: 'Italic',\n        },\n        DisplayFormat: {\n          Formatter: 'DateFormatter',\n          Options: {\n            Pattern: 'yyyyMMdd',\n          },\n        },\n      },\n      // Set a Display Format of negative parentheses for ChangeLastOrder\n      {\n        Scope: {\n          ColumnIds: ['ChangeLastOrder'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            Parentheses: true,\n          },\n        },\n      },\n      // Set a Display Format of \xa3 and 2 dp for InvoicedCost\n      {\n        Scope: {\n          ColumnIds: ['InvoicedCost'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            FractionDigits: 2,\n            Prefix: '\xa3',\n          },\n        },\n      },\n      // Set a Display Format of $ with 'AUD' suffix and space for integer separator for OrderCost\n      {\n        Scope: {\n          ColumnIds: ['OrderCost'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            FractionDigits: 2,\n            IntegerSeparator: ' ',\n            Prefix: '$',\n            Suffix: '(AUD)',\n          },\n        },\n      },\n    ],\n  },\n  UserInterface: {\n    PermittedValuesItems: [\n      {\n        Scope: {\n          ColumnIds: ['LastUpdatedTime'],\n        },\n        PermittedValues: [''],\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Format Col Demo',\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 20:case"end":return e.stop()}}),e)})));t.default=function(e){return Object(a.useEffect)((function(){O().then((function(t){e.onReady&&e.onReady(t)}))}),[]),null}}}]);