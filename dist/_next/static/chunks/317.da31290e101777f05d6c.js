(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[317],{eqV6:function(e,a,t){"use strict";t.r(a);var n=t("q1tI"),r=t("o0o1"),o=t.n(r),i=t("HaE+"),d=(t("nX5y"),t("ThKj")),s=t("rePB"),l=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("kmJB"),t("iMsr"),t("x727"),t("mbJ9")),p=t.n(l),c=t("mXS1");function m(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function u(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?m(Object(t),!0).forEach((function(a){Object(s.a)(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}var h={Dashboard:{Tabs:[{Name:"Grid",Toolbars:["Layout","Export","CellSummary","Alert"]},{Name:"Edit",Toolbars:["SmartEdit","BulkUpdate"]},{Name:"Search",Toolbars:["Query","Filter","QuickSearch"]}],VisibleButtons:["ConditionalStyle","Alert","CalculatedColumn"]}},b=[{headerName:"Make",field:"make",filter:!0,editable:!0,type:"abColDefString"},{headerName:"Model",field:"model",filter:!0,editable:!0,type:"abColDefString"}],y=[{make:"Toyota",model:"Celica",price:35e3},{make:"Toyota",model:"Yaris",price:4e4},{make:"Toyota",model:"Corolla",price:28e3},{make:"Ford",model:"Mondeo",price:32e3},{make:"Ford",model:"Fiesta",price:35e3},{make:"Ford",model:"Focus",price:26750},{make:"Ford",model:"Galaxy",price:41e3},{make:"Porsche",model:"Boxter",price:72500},{make:"Porsche",model:"Mission",price:81e3},{make:"Mitsubbishi",model:"Outlander",price:97800}],f=Object(i.a)(o.a.mark((function e(){var a,t;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a={primaryKey:"model",userName:"Demo User",adaptableId:"Basic Setup Demo",userInterfaceOptions:{adaptableToolPanelTitle:"Grid Settings"},predefinedConfig:h,vendorGrid:u(u({},{columnDefs:b,rowData:y,enableRangeSelection:!0,sideBar:!0,suppressAggFuncInHeader:!0,suppressMenuHide:!0}),{},{modules:c.a})},e.next=4,p.a.init(a);case 4:(t=e.sent).eventApi.on("AdaptableReady",(function(){t.quickSearchApi.runQuickSearch("or")}));case 6:case"end":return e.stop()}}),e)}))),g=Object(i.a)(o.a.mark((function e(){return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(new d.a).setUpAgGridLicence(),e.next=4,f();case 4:return e.abrupt("return",{code:"/*  \nNote: below is the JavaScript code required to instantiate AdapTable.\nIt assumes an HTML page with 2 <div> elements as follows:\n<body>    \n    ....    \n    \x3c!-- div for adaptable - always name this 'adaptable'--\x3e    \n    <div id=\"adaptable\"></div>    \n\n    \x3c!-- div for underlying vendor grid - always name this 'grid' and add the default ag-Grid Theme (here 'alpine') --\x3e    \n    <div id=\"grid\" class=\"ag-theme-alpine\" style=\"height: 500px\"></div>        \n    ....\n</body>\n*/\n\n// Import Adaptable Styles\n// You will always need to import 'index.css'; import 'dark.css' for our dark theme (these are the 2 shipped themes AdapTable provides)\n// If you create a custom theme then add the .css file here\nimport '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\n\n// Import ag-Grid Styles you require - in this case the Balham light and dark themes (our defaults)\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-alpine.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-alpine-dark.css';\n\n// Import the Adaptable object from the appropriate vendorGrid sub folder - in this case ag-Grid\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\n\n//Import any Adaptable types required\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\n\n// Import ag-grid objects from Community - this is always required by AdapTable and must be installed\nimport { GridOptions, ColDef } from '@ag-grid-community/all-modules';\n\n// Import any ag-Grid Enterprise modules you need (v.22 of ag-Grid introduced modularisation)\n// You can add as many individual Enterprise modules as you wish, or (as in this case) import AllEnterpriseModules\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\n// Import any Adaptable plugins that we want to use - in this case 'ChartsPlugin'\n//import ChartsPlugin from '@adaptabletools/adaptable-plugin-charts';\n\n// Step 1: Create any Predefined Config to ship AdapTable to meet your requirements. In this example we do 3 things:\n// a: Create 3 Tabs -  with 'Grid', 'Edit' and 'Search' related Toolbars respectively\n// b: Set 4 Visible buttons for the Dashboard Header - 'ConditionalStyle', 'Alert', 'CalculatedColumn', 'PieChart'\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    Tabs: [\n      {\n        Name: 'Grid',\n        Toolbars: ['Layout', 'Export', 'CellSummary', 'Alert'],\n      },\n      {\n        Name: 'Edit',\n        Toolbars: ['SmartEdit', 'BulkUpdate'],\n      },\n      {\n        Name: 'Search',\n        Toolbars: ['Query', 'Filter', 'QuickSearch'],\n      },\n    ],\n    VisibleButtons: ['ConditionalStyle', 'Alert', 'CalculatedColumn'],\n  },\n} as PredefinedConfig;\n\n// Step 2: Define the ag-Grid Column Schema required\n// Note: the type property references the AdaptableColumn type\nconst columnSchema: ColDef[] = [\n  {\n    headerName: 'Make',\n    field: 'make',\n    filter: true,\n    editable: true,\n    type: 'abColDefString',\n  },\n  {\n    headerName: 'Model',\n    field: 'model',\n    filter: true,\n    editable: true,\n    type: 'abColDefString',\n  },\n];\n\n// Step 3: Get your data (in the real world this will be dynamically sourced)\nconst rowData: any[] = [\n  {\n    make: 'Toyota',\n    model: 'Celica',\n    price: 35000,\n  },\n  { make: 'Toyota', model: 'Yaris', price: 40000 },\n  { make: 'Toyota', model: 'Corolla', price: 28000 },\n  { make: 'Ford', model: 'Mondeo', price: 32000 },\n  { make: 'Ford', model: 'Fiesta', price: 35000 },\n  { make: 'Ford', model: 'Focus', price: 26750 },\n  { make: 'Ford', model: 'Galaxy', price: 41000 },\n  { make: 'Porsche', model: 'Boxter', price: 72500 },\n  { make: 'Porsche', model: 'Mission', price: 81000 },\n  { make: 'Mitsubbishi', model: 'Outlander', price: 97800 },\n];\n\n// Step 4: Create ag-Grid GridOptions object - using the Column Schema and Row Data previously created\n// Note: We don't instantiate the ag-Grid here - AdapTable will do that later internally and wire everything up\n// Instead, we just create the GridOptions property and later set it as vendorGrid property in AdaptableOptions\nexport default async () => {\n  const gridOptions: GridOptions = {\n    columnDefs: columnSchema,\n    rowData: rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressAggFuncInHeader: true,\n    suppressMenuHide: true,\n  };\n\n  // Step 5: Create an AdaptableOptions object which defines how AdapTable should work and contains all it needs\n  // We only need to add values for non-mandatory properties where you are unhappy with the default options\n  // Full list of options and defaults can be found at:\n  // https://docs.adaptabletools.com/docs/api/adaptableoptions\n  // In this case we have just set the adaptableToolPanelTitle to 'Grid Settings' in UserInterfaceOptions\n  // 2 mandatory properties are 'primaryKey' (to allow us to identify each cell) and 'adaptableId' (a unique name for this instance)\n  // Another is 'vendorGrid' (a reference to the underlying grid  - in this case the gridOptions we created above which we pass in)\n  // Note that we attach any Enterprise modules to the 'modules' property of vendorGrid\n  // Another important property is predefinedConfig where we attach the 'demoConfig' we created above\n  // Finally add any plugins required by adding them to the 'plugins' property - in this example the 'ChartsPlugin'\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'model',\n    userName: 'Demo User',\n    adaptableId: 'Basic Setup Demo',\n    userInterfaceOptions: {\n      adaptableToolPanelTitle: 'Grid Settings',\n    },\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n    //  plugins: [ChartsPlugin()],\n  };\n\n  // Step 6: Instantiate AdapTable using the asynchronous Static Contstructor passing in the AdaptableOptions object\n  // Note that the constructor returns the AdaptableApi object (via a Promise) which gives run time access to AdapTable functionality\n  const adaptableApi: AdaptableApi = await Adaptable.init(adaptableOptions);\n\n  // Step 7 (optional): Listen to the AdaptableReady event to do anything required at startup\n  // Here we are using the AdaptableApi to run a quick search via code for any cell containing 'or'\n  adaptableApi.eventApi.on('AdaptableReady', () => {\n    adaptableApi.quickSearchApi.runQuickSearch('or');\n  });\n};\n"});case 5:case"end":return e.stop()}}),e)})));a.default=function(e){return Object(n.useEffect)((function(){g().then((function(a){e.onReady&&e.onReady(a)}))}),[]),null}}}]);