(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[237],{cl4H:function(e,t,n){"use strict";n.r(t);var r,a=n("q1tI"),i=n("o0o1"),o=n.n(i),s=n("HaE+"),l=(n("nX5y"),n("ThKj")),d=n("1OyB"),u=n("vuIU"),c=n("rePB"),m=(n("PMha"),n("5TJ6"),n("jWP/"),n("mbJ9")),f=n.n(m),p=n("mXS1"),h=n("LvDl"),I=n("EhJz"),g=n("dndX"),w=n("TjGc"),b=n("1PZI"),y=n("jZMG"),R=n("3+Em"),v=n("u/yc"),P=n("w3Pf"),S=n("MkVN"),T=n("HZtn"),A=n("uh5Q"),C=n("G6Tw");function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function N(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){Object(c.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var k=function(){function e(){Object(d.a)(this,e),Object(c.a)(this,"_dummyTrades",void 0);var t=new l.a;this._dummyTrades=[];for(var n=1;n<=2e5;n++)this._dummyTrades.push(t.createTrade(n))}return Object(u.a)(e,[{key:"getRows",value:function(e){var t=this.getTradesRange(e.request.startRow,e.request.endRow-e.request.startRow,r.configApi.configGetAdaptableSearchState(),r.configApi.configGetAdaptableSortState()),n=G<=e.endRow?G:-1;e.successCallback(t,n)}},{key:"getTradesRange",value:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100,a=arguments.length>2?arguments[2]:void 0,i=arguments.length>3?arguments[3]:void 0,o=this._dummyTrades;if(null!=a.columnFilters&&(null===(e=a.columnFilters)||void 0===e?void 0:e.length)>0&&a.columnFilters.forEach((function(e){var t,n=e.Predicate;null!=n.Inputs&&n.Inputs.length>0&&(t=n.Inputs[0]);var a=e.ColumnId;if("Blanks"==n.PredicateId)o=o.filter((function(e){return null==e[a]||void 0==e[a]||""==e[a]}));else if("NonBlanks"==n.PredicateId)o=o.filter((function(e){return null!=e[a]&&void 0!=e[a]&&""!=e[a]}));else if("Values"==n.PredicateId)o=o.filter((function(e){var t;return null!=e[a]&&void 0!=e[a]&&(null===(t=n.Inputs)||void 0===t?void 0:t.includes(e[a]))}));else switch(o=o.filter((function(e){return void 0!=e[a]})),r.columnApi.getColumnDataTypeFromColumnId(e.ColumnId)){case"Boolean":"True"==n.PredicateId?o=o.filter((function(e){return 1==e[a]})):"False"==n.PredicateId&&(o=o.filter((function(e){return 0==e[a]})));break;case"String":"Is"==n.PredicateId&&t?o=o.filter((function(e){return e[a]==t})):"IsNot"==n.PredicateId&&t?o=o.filter((function(e){return e[a]!==t})):"Contains"==n.PredicateId&&t?o=o.filter((function(e){return e[a].includes(t)})):"StartsWith"==n.PredicateId&&t?o=o.filter((function(e){return e[a].startsWith(t)})):"EndsWith"==n.PredicateId&&t?o=o.filter((function(e){return e[a].endsWith(t)})):"Regex"==n.PredicateId&&t&&(o=o.filter((function(e){return new RegExp(t).test(e[a])})));break;case"Number":if("Equals"==n.PredicateId&&t)o=o.filter((function(e){return e[a]==t}));else if("NotEquals"==n.PredicateId&&t)o=o.filter((function(e){return e[a]!==t}));else if("GreaterThan"==n.PredicateId&&t)o=o.filter((function(e){return Number(e[a])>Number(t)}));else if("LessThan"==n.PredicateId&&t)o=o.filter((function(e){return Number(e[a])<Number(t)}));else if("Positive"==n.PredicateId)o=o.filter((function(e){return Number(e[a])>0}));else if("Negative"==n.PredicateId)o=o.filter((function(e){return Number(e[a])<0}));else if("Between"==n.PredicateId&&t){var i=n.Inputs[1];i&&(o=o.filter((function(e){return Number(e[a])>t&&Number(e[a])<i})))}else if("NotBetween"==n.PredicateId&&t){var s=n.Inputs[1];s&&(o=o.filter((function(e){return Number(e[a])<t||Number(e[a])>s})))}break;case"Date":"On"==n.PredicateId&&t?o=o.filter((function(e){return e[a]==t})):"NotOn"==n.PredicateId&&t?o=o.filter((function(e){return e[a]!==t})):"After"==n.PredicateId&&t?o=o.filter((function(e){return Object(I.default)(e[a],t)})):"Before"==n.PredicateId&&t?o=o.filter((function(e){return Object(g.default)(e[a],t)})):"Today"==n.PredicateId?o=o.filter((function(e){return Object(w.default)(e[a])})):"Yesterday"==n.PredicateId?o=o.filter((function(e){return Object(b.default)(e[a])})):"Tomorrow"==n.PredicateId?o=o.filter((function(e){return Object(y.default)(e[a])})):"ThisWeek"==n.PredicateId?o=o.filter((function(e){return Object(R.default)(e[a])})):"ThisMonth"==n.PredicateId?o=o.filter((function(e){return Object(v.default)(e[a])})):"ThisQuarter"==n.PredicateId?o=o.filter((function(e){return Object(P.default)(e[a])})):"ThisYear"==n.PredicateId?o=o.filter((function(e){return Object(S.default)(e[a])})):"InPast"==n.PredicateId?o=o.filter((function(e){return Object(T.default)(e[a])})):"InFuture"==n.PredicateId?o=o.filter((function(e){return Object(A.default)(e[a])})):"NextWorkDay"==n.PredicateId?o=o.filter((function(e){return Object(C.default)(e[a],r.calendarApi.getNextWorkingDay())})):"NextWorkDay"==n.PredicateId&&(o=o.filter((function(e){return Object(C.default)(e[a],r.calendarApi.getPreviousWorkingDay())})))}})),i.columnSorts.length>0){var s=[],l=[];i.columnSorts.forEach((function(e){s.push(e.ColumnId),l.push(e.SortOrder.toLowerCase())})),o=Object(h.orderBy)(o,s,l)}return o.slice(t,t+n)}},{key:"getUniqueColumnValues",value:function(e){var t=Object(h.uniqBy)(this._dummyTrades,e.ColumnId).map((function(t){return t[e.ColumnId]})).filter((function(e){return void 0!=e}));return"Date"==e.DataType?t.map((function(e){return e.toDateString()})):t}}]),e}(),D=function(){var e=Object(s.a)(o.a.mark((function e(t){var n;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={primaryKey:"TradeId",userName:"Demo User",adaptableId:"Server Mode Demo",predefinedConfig:{Dashboard:{Tabs:[{Name:"Server Demo Toolbar",Toolbars:["Export","Layout","SystemStatus","Filter"]}]},UserInterface:{PermittedValuesItems:[{Scope:{All:!0},GetColumnValuesFunction:"GetUniqueColumnValues"}]}},vendorGrid:N(N({},{columnDefs:t,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0}),{},{rowModelType:"serverSide",modules:p.a}),userFunctions:[{name:"GetUniqueColumnValues",type:"GetColumnValuesFunction",handler:function(e){return j.getUniqueColumnValues(e)}}]},e.next=4,f.a.init(n);case 4:return(r=e.sent).eventApi.on("AdaptableReady",(function(e){e.vendorGrid.api.setServerSideDatasource(j)})),e.abrupt("return",{adaptableOptions:n,adaptableApi:r});case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),G=100,j=new k,B=Object(s.a)(o.a.mark((function e(){var t,n,r,a;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new l.a).setUpAgGridLicence(),n=t.getBasicTradeSchema(),e.next=5,D(n);case 5:return r=e.sent,a=r.adaptableOptions,r.adaptableApi,a.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions, ColDef } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  AdaptableApi,\n  AdaptableReadyInfo,\n  AdaptableSearchState,\n  ColumnFilter,\n  AdaptableColumn,\n  AdaptableSortState,\n  ColumnSort,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\nimport { ITrade } from '../../../Helpers/Trade';\nimport { HelperAgGrid } from '../../../Helpers/HelperAgGrid';\nimport { orderBy, uniqBy } from 'lodash';\nimport {\n  isAfter,\n  isBefore,\n  isFuture,\n  isPast,\n  isSameDay,\n  isThisMonth,\n  isThisQuarter,\n  isThisWeek,\n  isThisYear,\n  isToday,\n  isTomorrow,\n  isYesterday,\n} from 'date-fns';\nvar adaptableApi: AdaptableApi;\n\n// this slightly contrived Mock Server mimics what will happen on a real server\n// the key method is 'getRows' which will be called by ag-Grid whenever filters or sorts change\n// or when the user scolls to the bottom of the grid\n// this Mock Server is passed to ag-Grid via its api method: setServerSideDatasource\nclass MockServer {\n  _dummyTrades: ITrade[];\n\n  constructor() {\n    // create an inital dataset with 150,000 rows (to mimic many rows on the server)\n    const helperAgGrid = new HelperAgGrid();\n    this._dummyTrades = [];\n    for (let i = 1; i <= 200000; i++) {\n      this._dummyTrades.push(helperAgGrid.createTrade(i));\n    }\n  }\n\n  // called by ag-Grid whenever we need to get the next batch of rows\n  // we receieve the params object to get the start and end row numbers\n  // but we pass in the Adaptable Search State to perform filtering based on that\n  getRows(params: any) {\n    let rows = this.getTradesRange(\n      params.request.startRow,\n      params.request.endRow - params.request.startRow,\n      adaptableApi.configApi.configGetAdaptableSearchState(), // this is the current Adaptable Search State\n      adaptableApi.configApi.configGetAdaptableSortState() // this is the current Adaptable Sort State\n    );\n    const lastRow = BATCH_COUNT <= params.endRow ? BATCH_COUNT : -1;\n    params.successCallback(rows, lastRow);\n  }\n\n  // In the real world this will be done on the server likely using SQL or similar structures\n  // But here we do it in JavaScript to show how you can access the Column Filters in AdaptableSearchState\n  // Each Column Filter has a Predicate that we interrogate seperately\n  // We use a 3rd party date library 'date-fns' to manage dates but this can be done in any way that suits your requirements\n  // This is the not the most performant way to accomplish this but we have dont it this way to show each step in turn\n  getTradesRange(\n    start: number = 1,\n    count: number = 100,\n    searchState: AdaptableSearchState,\n    sortState: AdaptableSortState\n  ): ITrade[] {\n    let matchingRows: ITrade[] = this._dummyTrades;\n    if (\n      searchState.columnFilters != null &&\n      searchState.columnFilters?.length > 0\n    ) {\n      searchState.columnFilters.forEach((columnFilter: ColumnFilter) => {\n        let predicate = columnFilter.Predicate;\n        let firstInput: any;\n        if (predicate.Inputs != null && predicate.Inputs.length > 0) {\n          firstInput = predicate.Inputs[0];\n        }\n        let columnId: string = columnFilter.ColumnId;\n\n        // Blanks, Non-Blanks and Values (a.k.a. IN) work across all DataTypes\n        if (predicate.PredicateId == 'Blanks') {\n          matchingRows = matchingRows.filter(\n            (t: any) =>\n              t[columnId] == null ||\n              t[columnId] == undefined ||\n              t[columnId] == ''\n          );\n        } else if (predicate.PredicateId == 'NonBlanks') {\n          matchingRows = matchingRows.filter(\n            (t: any) =>\n              t[columnId] != null &&\n              t[columnId] != undefined &&\n              t[columnId] != ''\n          );\n        } else if (predicate.PredicateId == 'Values') {\n          matchingRows = matchingRows.filter(\n            (t: any) =>\n              t[columnId] != null &&\n              t[columnId] != undefined &&\n              predicate.Inputs?.includes(t[columnId])\n          );\n        } else {\n          // Remove any empty values\n          matchingRows = matchingRows.filter(\n            (t: any) => t[columnId] != undefined\n          );\n          // work out the predicate based on the column's datatype using an an AdaptableApi.ColumnApi method\n          switch (\n            adaptableApi.columnApi.getColumnDataTypeFromColumnId(\n              columnFilter.ColumnId\n            )\n          ) {\n            case 'Boolean':\n              if (predicate.PredicateId == 'True') {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] == true\n                );\n              } else if (predicate.PredicateId == 'False') {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] == false\n                );\n              }\n              break;\n\n            case 'String':\n              if (predicate.PredicateId == 'Is' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] == firstInput\n                );\n              } else if (predicate.PredicateId == 'IsNot' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] !== firstInput\n                );\n              } else if (predicate.PredicateId == 'Contains' && firstInput) {\n                matchingRows = matchingRows.filter((t: any) =>\n                  t[columnId].includes(firstInput)\n                );\n              } else if (predicate.PredicateId == 'StartsWith' && firstInput) {\n                matchingRows = matchingRows.filter((t: any) =>\n                  t[columnId].startsWith(firstInput)\n                );\n              } else if (predicate.PredicateId == 'EndsWith' && firstInput) {\n                matchingRows = matchingRows.filter((t: any) =>\n                  t[columnId].endsWith(firstInput)\n                );\n              } else if (predicate.PredicateId == 'Regex' && firstInput) {\n                matchingRows = matchingRows.filter((t: any) =>\n                  new RegExp(firstInput).test(t[columnId])\n                );\n              }\n              break;\n\n            case 'Number':\n              if (predicate.PredicateId == 'Equals' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] == firstInput\n                );\n              } else if (predicate.PredicateId == 'NotEquals' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] !== firstInput\n                );\n              } else if (predicate.PredicateId == 'GreaterThan' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => Number(t[columnId]) > Number(firstInput)\n                );\n              } else if (predicate.PredicateId == 'LessThan' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => Number(t[columnId]) < Number(firstInput)\n                );\n              } else if (predicate.PredicateId == 'Positive') {\n                matchingRows = matchingRows.filter(\n                  (t: any) => Number(t[columnId]) > 0\n                );\n              } else if (predicate.PredicateId == 'Negative') {\n                matchingRows = matchingRows.filter(\n                  (t: any) => Number(t[columnId]) < 0\n                );\n              } else if (predicate.PredicateId == 'Between' && firstInput) {\n                let secondInput: any = predicate!.Inputs![1];\n                if (secondInput) {\n                  matchingRows = matchingRows.filter(\n                    (t: any) =>\n                      Number(t[columnId]) > firstInput &&\n                      Number(t[columnId]) < secondInput\n                  );\n                }\n              } else if (predicate.PredicateId == 'NotBetween' && firstInput) {\n                let secondInput: any = predicate!.Inputs![1];\n                if (secondInput) {\n                  matchingRows = matchingRows.filter(\n                    (t: any) =>\n                      Number(t[columnId]) < firstInput ||\n                      Number(t[columnId]) > secondInput\n                  );\n                }\n              }\n              break;\n\n            case 'Date':\n              if (predicate.PredicateId == 'On' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] == firstInput\n                );\n              } else if (predicate.PredicateId == 'NotOn' && firstInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) => t[columnId] !== firstInput\n                );\n              } else if (predicate.PredicateId == 'After' && firstInput) {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isAfter(t[columnId], firstInput)\n                );\n              } else if (predicate.PredicateId == 'Before' && firstInput) {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isBefore(t[columnId], firstInput)\n                );\n              } else if (predicate.PredicateId == 'Today') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isToday(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'Yesterday') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isYesterday(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'Tomorrow') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isTomorrow(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'ThisWeek') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isThisWeek(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'ThisMonth') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isThisMonth(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'ThisQuarter') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isThisQuarter(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'ThisYear') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isThisYear(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'InPast') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isPast(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'InFuture') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isFuture(t[columnId])\n                );\n              } else if (predicate.PredicateId == 'NextWorkDay') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isSameDay(\n                    t[columnId],\n                    adaptableApi.calendarApi.getNextWorkingDay()\n                  )\n                );\n              } else if (predicate.PredicateId == 'NextWorkDay') {\n                matchingRows = matchingRows.filter((t: any) =>\n                  isSameDay(\n                    t[columnId],\n                    adaptableApi.calendarApi.getPreviousWorkingDay()\n                  )\n                );\n              }\n              break;\n          }\n        }\n      });\n    }\n\n    // Finally lets apply any Sorting as required to match what is currently sorted in the Grid.\n    // The AdaptableSortState param gives us current sort info and the Lodash orderBy function replicates that for our data set.\n    if (sortState.columnSorts.length > 0) {\n      let sortedColumns: string[] = [];\n      let sortDirections: string[] = [];\n      sortState.columnSorts.forEach((cs: ColumnSort) => {\n        sortedColumns.push(cs.ColumnId);\n        sortDirections.push(cs.SortOrder.toLowerCase());\n      });\n      matchingRows = orderBy(\n        matchingRows,\n        sortedColumns,\n        sortDirections as any\n      );\n    }\n\n    return matchingRows.slice(start, start + count);\n  }\n\n  // Retrieves all the distinct values - using 'uniqBy' from lodash\n  // In the real world this will run on the server\n  // However it demonstrates how you can pass AdapTable the values it needs to show in filter dropdowns when running in server mode\n  // This is invoked in UserFunctions section of AdaptableOptions\n  getUniqueColumnValues(column: AdaptableColumn): any[] {\n    let returnVals = uniqBy(this._dummyTrades, column.ColumnId)\n      .map((t: any) => {\n        return t[column.ColumnId];\n      })\n      .filter((v: any) => v != undefined);\n\n    if (column.DataType == 'Date') {\n      let formatDateValues = returnVals.map((v: Date) => {\n        return v.toDateString();\n      });\n      return formatDateValues;\n    } else {\n      return returnVals; //.slice(1, 2000);\n    }\n  }\n}\n\nexport default async (columnDefs: ColDef[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'TradeId',\n    userName: 'Demo User',\n    adaptableId: 'Server Mode Demo',\n    predefinedConfig: {\n      Dashboard: {\n        Tabs: [\n          {\n            Name: 'Server Demo Toolbar',\n            Toolbars: ['Export', 'Layout', 'SystemStatus', 'Filter'],\n          },\n        ],\n      },\n      UserInterface: {\n        PermittedValuesItems: [\n          {\n            Scope: {\n              All: true,\n            },\n            GetColumnValuesFunction: 'GetUniqueColumnValues',\n          },\n        ],\n      },\n    },\n    vendorGrid: {\n      ...gridOptions,\n      rowModelType: 'serverSide',\n      modules: AllEnterpriseModules,\n    },\n    // provide an implmentation for the 'GetColumnValuesFunction' to get unique values\n    // this is paired with PermittedValues in PredefinedConfig\n    userFunctions: [\n      {\n        name: 'GetUniqueColumnValues',\n        type: 'GetColumnValuesFunction',\n        handler(column: AdaptableColumn) {\n          return mockServer.getUniqueColumnValues(column);\n        },\n      },\n    ],\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  adaptableApi.eventApi.on('AdaptableReady', (info: AdaptableReadyInfo) => {\n    // Pass ag-Grid our Mock Server - with its implementation of getRows\n    // This will then be invoked by ag-Grid as required\n    info.vendorGrid.api.setServerSideDatasource(mockServer);\n  });\n  return { adaptableOptions, adaptableApi };\n};\n\nconst BATCH_COUNT = 100;\nconst mockServer = new MockServer();\n"});case 10:case"end":return e.stop()}}),e)})));t.default=function(e){return Object(a.useEffect)((function(){B().then((function(t){e.onReady&&e.onReady(t)}))}),[]),null}}}]);