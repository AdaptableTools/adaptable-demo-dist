(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[284],{gvb4:function(e,n,t){"use strict";t.r(n);var a,r=t("q1tI"),o=t("o0o1"),s=t.n(o),i=t("HaE+"),l=(t("nX5y"),t("smsc")),u=t("ThKj"),d=t("rePB"),p=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("mbJ9")),c=t.n(p),m=t("mXS1");function C(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function g(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?C(Object(t),!0).forEach((function(n){Object(d.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):C(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var P={Query:{CurrentQuery:"IN_BUSINESS_YEAR([OrderDate]) AND IN_BUSINESS_YEAR([ShippedDate])"},CalculatedColumn:{CalculatedColumns:[{ColumnId:"OrderCostGBP",FriendlyName:"Order Cost GBP",ColumnExpression:"GBP_PRICE([OrderCost])"},{ColumnId:"PackageCostGBP",FriendlyName:"Package Cost GBP",ColumnExpression:"GBP_PRICE([PackageCost])"}]},Layout:{CurrentLayout:"QueryLayout",Layouts:[{Columns:["OrderId","ShipVia","ItemCount","OrderCostGBP","OrderCost","PackageCostGBP","PackageCost","CompanyName","ChangeLastOrder"],Name:"QueryLayout"}]},FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["OrderCostGBP","PackageCostGBP"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{FractionDigits:2,Prefix:"\xa3"}},CellAlignment:"Right"}]},Dashboard:{Tabs:[{Name:"Search",Toolbars:["Query"]}]}},b=function(){var e=Object(i.a)(s.a.mark((function e(n,t){var r,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={columnDefs:n,rowData:t,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,statusBar:{statusPanels:[{statusPanel:"agTotalRowCountComponent",align:"left"},{statusPanel:"agFilteredRowCountComponent"}]}},o={primaryKey:"OrderId",userName:"Demo User",adaptableId:"User Query Functions Demo",queryOptions:{expressionFunctions:g(g({},p.AdaptableExpressionFunctions),{},{IN_BUSINESS_YEAR:{handler:function(e){return e[0]>new Date(2020,5,1)},isPredicate:!0,description:"Returns true if Date is in current business year",signatures:["IN_BUSINESS_YEAR(dateToCheck: Date)"],examples:["IN_BUSINESS_YEAR([tradeDate])"]},GBP_PRICE:{handler:function(e,n){var t=n.node.data.ShipVia;return y.getSterlingPrice(e[0],t)},description:"Converts USD price to GBP (via mock service)",signatures:["GBP_PRICE(dollarPrice: number)"],examples:["GBP_PRICE([ItemCost])"]}})},predefinedConfig:P,vendorGrid:g(g({},r),{},{modules:m.a})},e.next=4,c.a.init(o);case 4:return a=e.sent,e.abrupt("return",{adaptableOptions:o,adaptableApi:a});case 6:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),y={getSterlingPrice:function(e,n){return"United Package"==n?1.36*e:1.45*e}},f=Object(i.a)(s.a.mark((function e(){var n,t,a,r,o;return s.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new u.a).setUpAgGridLicence(),t=JSON.parse(JSON.stringify(l)),n.convertExcelData(t),a=n.getBasicNorthwindColumnSchema(),e.next=7,b(a,t);case 7:return r=e.sent,o=r.adaptableOptions,r.adaptableApi,o.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n  ExpressionContext,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n// Make sure to import this object as it will be referenced in expressionFunctions\nimport { AdaptableExpressionFunctions } from '@adaptabletools/adaptable/agGrid';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Query: {\n    CurrentQuery:\n      'IN_BUSINESS_YEAR([OrderDate]) AND IN_BUSINESS_YEAR([ShippedDate])',\n  },\n  CalculatedColumn: {\n    CalculatedColumns: [\n      {\n        ColumnId: 'OrderCostGBP',\n        FriendlyName: 'Order Cost GBP',\n        ColumnExpression: 'GBP_PRICE([OrderCost])',\n      },\n      {\n        ColumnId: 'PackageCostGBP',\n        FriendlyName: 'Package Cost GBP',\n        ColumnExpression: 'GBP_PRICE([PackageCost])',\n      },\n    ],\n  },\n  Layout: {\n    CurrentLayout: 'QueryLayout',\n    Layouts: [\n      {\n        Columns: [\n          'OrderId',\n          'ShipVia',\n          'ItemCount',\n          'OrderCostGBP',\n          'OrderCost',\n          'PackageCostGBP',\n          'PackageCost',\n          'CompanyName',\n          'ChangeLastOrder',\n        ],\n        Name: 'QueryLayout',\n      },\n    ],\n  },\n  FormatColumn: {\n    FormatColumns: [\n      {\n        Scope: {\n          ColumnIds: ['OrderCostGBP', 'PackageCostGBP'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            FractionDigits: 2,\n            Prefix: '\xa3',\n          },\n        },\n        CellAlignment: 'Right',\n      },\n    ],\n  },\n  Dashboard: {\n    Tabs: [\n      {\n        Name: 'Search',\n        Toolbars: ['Query'],\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    statusBar: {\n      statusPanels: [\n        { statusPanel: 'agTotalRowCountComponent', align: 'left' },\n        { statusPanel: 'agFilteredRowCountComponent' },\n      ],\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'User Query Functions Demo',\n    queryOptions: {\n      expressionFunctions: {\n        ...AdaptableExpressionFunctions,\n        IN_BUSINESS_YEAR: {\n          handler(args: any[]) {\n            const dateToCheck: Date = args[0]; // normally do type checking here!\n            const businessYear: Date = new Date(2020, 5, 1);\n            return dateToCheck > businessYear;\n          },\n          isPredicate: true,\n          description: 'Returns true if Date is in current business year',\n          signatures: ['IN_BUSINESS_YEAR(dateToCheck: Date)'],\n          examples: ['IN_BUSINESS_YEAR([tradeDate])'],\n        },\n        GBP_PRICE: {\n          handler(args: any[], context: ExpressionContext) {\n            const shippingCompany = context.node.data['ShipVia'];\n            return mockCurrencyConverterService.getSterlingPrice(\n              args[0],\n              shippingCompany\n            );\n          },\n          description: 'Converts USD price to GBP (via mock service)',\n          signatures: ['GBP_PRICE(dollarPrice: number)'],\n          examples: ['GBP_PRICE([ItemCost])'],\n        },\n      },\n    },\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n\nlet mockCurrencyConverterService = {\n  getSterlingPrice: (dollarPrice: number, shipVia: string) => {\n    // will get externally and do properly in real life scenario\n    return shipVia == 'United Package'\n      ? dollarPrice * 1.36\n      : dollarPrice * 1.45;\n  },\n};\n"});case 12:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(r.useEffect)((function(){f().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);