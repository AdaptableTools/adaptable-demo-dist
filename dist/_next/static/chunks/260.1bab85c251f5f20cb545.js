(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[260],{me9m:function(e,n,t){"use strict";t.r(n);var a,o=t("q1tI"),r=t("o0o1"),i=t.n(r),l=t("HaE+"),s=(t("nX5y"),t("smsc")),d=t("ThKj"),p=t("rePB"),u=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("mbJ9")),m=t.n(u),c=t("mXS1");function b(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?b(Object(t),!0).forEach((function(n){Object(p.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var y={FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["OrderDate"]},Style:{FontWeight:"Bold",FontSize:"XSmall",FontStyle:"Italic"},CellAlignment:"Right",DisplayFormat:{Formatter:"DateFormatter",Options:{Pattern:"yyyyMMdd"}}}]},Layout:{CurrentLayout:"Grouped",Layouts:[{Columns:["ShipVia","CustomerReference","ContactName","InvoicedCost","ChangeLastOrder","OrderCost","PackageCost","Employee"],RowGroupedColumns:["ShipCountry"],Name:"Grouped"}]}},C=function(){var e=Object(l.a)(i.a.mark((function e(n,t){var o;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Delayed Data Demo",predefinedConfig:y,layoutOptions:{includeExpandedRowGroups:!0,autoSizeColumnsInLayout:!0},vendorGrid:f(f({},{columnDefs:n,enableRangeSelection:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0,minWidth:200},columnTypes:{abColDefNumber:{},abColDefString:{},abColDefBoolean:{},abColDefDate:{},abColDefObject:{},abColDefNumberArray:{}}}),{},{modules:c.a})},e.next=4,m.a.init(o);case 4:return(a=e.sent).eventApi.on("AdaptableReady",(function(){setTimeout((function(){a.gridApi.loadGridData(t)}),3e3)})),e.abrupt("return",{adaptableOptions:o,adaptableApi:a});case 7:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),g=Object(l.a)(i.a.mark((function e(){var n,t,a,o,r;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new d.a).setUpAgGridLicence(),t=JSON.parse(JSON.stringify(s)),n.convertExcelData(t),a=n.getBasicNorthwindColumnSchema(),e.next=7,C(a,t);case 7:return o=e.sent,r=o.adaptableOptions,o.adaptableApi,r.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  AdaptableApi,\n  PredefinedConfig,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  FormatColumn: {\n    FormatColumns: [\n      {\n        Scope: {\n          ColumnIds: ['OrderDate'],\n        },\n        Style: {\n          FontWeight: 'Bold',\n          FontSize: 'XSmall',\n          FontStyle: 'Italic',\n        },\n        CellAlignment: 'Right',\n        DisplayFormat: {\n          Formatter: 'DateFormatter',\n          Options: {\n            Pattern: 'yyyyMMdd',\n          },\n        },\n      },\n    ],\n  },\n  Layout: {\n    CurrentLayout: 'Grouped',\n    Layouts: [\n      {\n        Columns: [\n          'ShipVia',\n          'CustomerReference',\n          'ContactName',\n          'InvoicedCost',\n          'ChangeLastOrder',\n          'OrderCost',\n          'PackageCost',\n          'Employee',\n        ],\n        RowGroupedColumns: ['ShipCountry'],\n        Name: 'Grouped',\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    // rowData, - note we are NOT setting rowData at startup\n    enableRangeSelection: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n      minWidth: 200,\n    },\n    columnTypes: {\n      abColDefNumber: {},\n      abColDefString: {},\n      abColDefBoolean: {},\n      abColDefDate: {},\n      abColDefObject: {},\n      abColDefNumberArray: {},\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Delayed Data Demo',\n    predefinedConfig: demoConfig,\n    layoutOptions: {\n      includeExpandedRowGroups: true,\n      autoSizeColumnsInLayout: true,\n    },\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  // mimic getting data from the server by waiting for a few seconds\n  adaptableApi.eventApi.on('AdaptableReady', () => {\n    setTimeout(() => {\n      // use the load data method in GridApi of AdaptableApi\n      adaptableApi.gridApi.loadGridData(rowData);\n    }, 3000);\n  });\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 12:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(o.useEffect)((function(){g().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);