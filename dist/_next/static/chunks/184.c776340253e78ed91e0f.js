(window.webpackJsonp=window.webpackJsonp||[]).push([[184,12],{"2Eek":function(e,n,t){e.exports=t("W7oM")},"7m0m":function(e,n,t){var a=t("Y7ZC"),r=t("uplh"),o=t("NsO/"),l=t("vwuL"),i=t("IP1Z");a(a.S,"Object",{getOwnPropertyDescriptors:function(e){for(var n,t,a=o(e),s=l.f,d=r(a),u={},m=0;d.length>m;)void 0!==(t=s(a,n=d[m++]))&&i(u,n,t);return u}})},W7oM:function(e,n,t){t("nZgG");var a=t("WEpk").Object;e.exports=function(e,n){return a.defineProperties(e,n)}},XoMD:function(e,n,t){e.exports=t("hYAz")},hYAz:function(e,n,t){t("7m0m"),e.exports=t("WEpk").Object.getOwnPropertyDescriptors},nZgG:function(e,n,t){var a=t("Y7ZC");a(a.S+a.F*!t("jmDH"),"Object",{defineProperties:t("fpC5")})},sPCl:function(e,n,t){"use strict";t.r(n);var a=t("q1tI"),r=t("9Jkg"),o=t.n(r),l=(t("nX5y"),t("smsc")),i=t("ThKj"),s=t("hfKm"),d=t.n(s),u=t("2Eek"),m=t.n(u),p=t("XoMD"),c=t.n(p),f=t("Jo+v"),b=t.n(f),C=t("4mXO"),g=t.n(C),D=t("pLtp"),v=t.n(D),y=t("vYYK"),F=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("mbJ9")),O=t.n(F),P=t("mXS1");function w(e,n){var t=v()(e);if(g.a){var a=g()(e);n&&(a=a.filter((function(n){return b()(e,n).enumerable}))),t.push.apply(t,a)}return t}function A(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?w(Object(t),!0).forEach((function(n){Object(y.a)(e,n,t[n])})):c.a?m()(e,c()(t)):w(Object(t)).forEach((function(n){d()(e,n,b()(t,n))}))}return e}var I={NamedFilter:{NamedFilters:[{Name:"High",Scope:{ColumnIds:["OrderId"]},FilterPredicate:function(e,n){var t=e.data.InvoicedCost,a=e.data.ItemCount;return t>1e3&&a>10}},{Name:"New Starter",Scope:{ColumnIds:["Employee"]},FilterPredicate:function(e,n,t){return"Robert King"==t||"Laura Callahan"==t||"Andrew Fuller"==t}},{Name:"Post Takeover",Scope:{DataType:"Date"},FilterPredicate:function(e,n,t){return t>new Date("2019-09-21")}},{Name:"After Work",Scope:{ColumnIds:["LastUpdatedTime"]},FilterPredicate:function(e,n,t){return t.getHours()>17}}]},ColumnFilter:{ColumnFilters:[{ColumnId:"Employee",Filter:{FilterExpressions:[{ColumnId:"Employee",Filters:["New Starter"]}]}}]},UserInterface:{PermittedValuesColumns:[{ColumnId:"LastUpdatedTime",PermittedValues:[""]}]}},h=function(){var e=new i.a;e.setUpAgGridLicence(),console.log(1);var n=JSON.parse(o()(l));e.convertExcelDates(n);var t=function(e,n){var t={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Named Filters Demo",predefinedConfig:I,vendorGrid:A({},{columnDefs:e,rowData:n,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,floatingFilter:!0,statusBar:{statusPanels:[{statusPanel:"agTotalRowCountComponent",align:"left"},{statusPanel:"agFilteredRowCountComponent"}]},columnTypes:{abColDefNumber:{},abColDefString:{},abColDefBoolean:{},abColDefDate:{},abColDefObject:{},abColDefNumberArray:{}}},{modules:P.a})};return{adaptableOptions:t,adaptableApi:O.a.init(t)}}(e.getNorthwindColumnSchemaWithLastUpdatedTime(),n),a=t.adaptableOptions;t.adaptableApi;return a.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  NamedFilter: {\n    NamedFilters: [\n      {\n        Name: 'High',\n        Scope: {\n          ColumnIds: ['OrderId'],\n        },\n        FilterPredicate: (_record, _columnId) => {\n          let invoiced: number = _record.data.InvoicedCost;\n          let itemCount: number = _record.data.ItemCount;\n          return invoiced > 1000 && itemCount > 10 ? true : false;\n        },\n      },\n      {\n        Name: 'New Starter',\n        Scope: {\n          ColumnIds: ['Employee'],\n        },\n        FilterPredicate: (_record, _columnId, cellValue) => {\n          return (\n            cellValue == 'Robert King' ||\n            cellValue == 'Laura Callahan' ||\n            cellValue == 'Andrew Fuller'\n          );\n        },\n      },\n      {\n        Name: 'Post Takeover',\n        Scope: {\n          DataType: 'Date',\n        },\n        FilterPredicate: (_record, _columnId, cellValue) => {\n          let takeOverDate = new Date('2019-09-21');\n          return (cellValue as Date) > takeOverDate;\n        },\n      },\n      {\n        Name: 'After Work',\n        Scope: {\n          ColumnIds: ['LastUpdatedTime'],\n        },\n        FilterPredicate: (_record, _columnId, cellValue) => {\n          return (cellValue as Date).getHours() > 17;\n        },\n      },\n    ],\n  },\n  ColumnFilter: {\n    ColumnFilters: [\n      {\n        ColumnId: 'Employee',\n        Filter: {\n          FilterExpressions: [\n            {\n              ColumnId: 'Employee',\n              Filters: ['New Starter'],\n            },\n          ],\n        },\n      },\n    ],\n  },\n  UserInterface: {\n    PermittedValuesColumns: [\n      {\n        // For LastUpdatedTime column we return an array with a single empty value as it makes no sense to see each time value\n        ColumnId: 'LastUpdatedTime',\n        PermittedValues: [''],\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    floatingFilter: true,\n    statusBar: {\n      statusPanels: [\n        { statusPanel: 'agTotalRowCountComponent', align: 'left' },\n        { statusPanel: 'agFilteredRowCountComponent' },\n      ],\n    },\n    columnTypes: {\n      abColDefNumber: {},\n      abColDefString: {},\n      abColDefBoolean: {},\n      abColDefDate: {},\n      abColDefObject: {},\n      abColDefNumberArray: {},\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Named Filters Demo',\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n"}};n.default=function(e){return Object(a.useEffect)((function(){var n=h();e.onReady&&e.onReady(n)}),[]),null}},uplh:function(e,n,t){var a=t("ar/p"),r=t("mqlF"),o=t("5K7Z"),l=t("5T2Y").Reflect;e.exports=l&&l.ownKeys||function(e){var n=a.f(o(e)),t=r.f;return t?n.concat(t(e)):n}}}]);