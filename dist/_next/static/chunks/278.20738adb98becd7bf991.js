(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[278],{jZXt:function(e,n,t){"use strict";t.r(n);var a=t("q1tI"),r=t("o0o1"),i=t.n(r),o=t("HaE+"),l=(t("nX5y"),t("ThKj")),s=t("rePB"),d=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("mbJ9")),m=t.n(d),f=t("mXS1");function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){Object(s.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var p={Dashboard:{Tabs:[{Name:"Grid",Toolbars:["Layout","Filter"]}]},FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["price"]},CellAlignment:"Right",DisplayFormat:{Formatter:"NumberFormatter",Options:{IntegerSeparator:","}}},{Scope:{ColumnIds:["firstBought"]},CellAlignment:"Center",DisplayFormat:{Formatter:"DateFormatter",Options:{Pattern:"yyyyMMdd"}}}]}},g=[{headerName:"Make",field:"make",filter:!0,editable:!1,type:"abColDefString"},{headerName:"Model",field:"model",filter:!0,editable:!1,type:"abColDefString"},{headerName:"Price",field:"price",filter:!0,editable:!1,type:"abColDefNumber"},{headerName:"Miles To Gallon",field:"milesToGallon",filter:!0,editable:!1,type:"abColDefNumber",valueFormatter:function(e){return e.value?e.value.toLocaleString("en-US",{minimumFractionDigits:2,maximumFractionDigits:2}):null}},{headerName:"First Used",field:"firstUsed",filter:!0,editable:!1,type:"abColDefDate",valueFormatter:function(e){return e.value?new Intl.DateTimeFormat("en-GB").format(e.value):""}},{headerName:"First Bought",field:"firstBought",filter:!0,editable:!1,type:"abColDefDate"},{headerName:"Energy Rating",field:"EnergyRating",enableValue:!0,editable:!0,sortable:!0,cellRenderer:D,type:"abColDefNumber",filter:!0,enablePivot:!0,resizable:!0},{headerName:"Efficency Rating",field:"EfficencyRating",enableValue:!0,editable:!0,sortable:!0,valueFormatter:function(e){for(var n="",t=0;t<e.value;t++)n+="*";return n},type:"abColDefNumber",filter:!0,enablePivot:!0,resizable:!0},{headerName:"Composite",editable:!1,colId:"composite",filter:!0,enableRowGroup:!0,valueGetter:function(e){return e.data&&e.data.make&&e.data.model?e.data.make+" - "+e.data.model:void 0},type:"abColDefString"}],b=[{make:"Toyota",model:"Celica",price:35e3,firstUsed:new Date(2017,11,4),firstBought:new Date(2017,11,4),milesToGallon:21.345676,EnergyRating:1,EfficencyRating:2},{make:"Toyota",model:"Yaris",price:4e4,firstUsed:new Date(2013,1,15),firstBought:new Date(2013,1,15),milesToGallon:29.32432423,EnergyRating:4,EfficencyRating:1},{make:"Toyota",model:"Corolla",price:28e3,firstUsed:new Date(2017,6,9),firstBought:new Date(2017,6,9),milesToGallon:32.9032523473287,EnergyRating:5,EfficencyRating:2},{make:"Ford",model:"Mondeo",price:32e3,firstUsed:new Date(2009,10,2),firstBought:new Date(2009,10,2),milesToGallon:28.247893473289,EnergyRating:4,EfficencyRating:2},{make:"Ford",model:"Fiesta",price:35e3,firstUsed:new Date(2018,8,12),firstBought:new Date(2018,8,12),milesToGallon:34.0001,EnergyRating:5,EfficencyRating:3},{make:"Ford",model:"Focus",price:26750,firstUsed:new Date(2017,3,3),firstBought:new Date(2017,3,3),milesToGallon:31.2432432423,EnergyRating:3,EfficencyRating:1},{make:"Ford",model:"Galaxy",price:41e3,firstUsed:new Date(2015,4,14),firstBought:new Date(2015,4,14),milesToGallon:29.29432404,EnergyRating:2,EfficencyRating:5},{make:"Porsche",model:"Boxter",price:72500,firstUsed:new Date(2016,1,28),firstBought:new Date(2016,1,28),milesToGallon:32.29580292,EnergyRating:4,EfficencyRating:4},{make:"Porsche",model:"Mission",price:81e3,firstUsed:new Date(2008,10,7),firstBought:new Date(2008,10,7),milesToGallon:35.7822957,EnergyRating:5,EfficencyRating:2},{make:"Mitsubbishi",model:"Outlander",price:97800,firstUsed:new Date(2017,11,14),firstBought:new Date(2017,11,14),milesToGallon:19.224309,EnergyRating:4,EfficencyRating:5}],y=Object(o.a)(i.a.mark((function e(){var n,t;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={primaryKey:"model",userName:"Demo User",adaptableId:"Setup Columns Demo",predefinedConfig:p,vendorGrid:c(c({},{columnDefs:g,enableRangeSelection:!0,sideBar:!0,suppressAggFuncInHeader:!0,suppressMenuHide:!0,columnTypes:{abColDefNumber:{},abColDefString:{},abColDefBoolean:{},abColDefDate:{},abColDefObject:{},abColDefNumberArray:{}}}),{},{modules:f.a})},e.next=4,m.a.init(n);case 4:(t=e.sent).eventApi.on("AdaptableReady",(function(){setTimeout((function(){t.gridApi.loadGridData(b)}),100)}));case 6:case"end":return e.stop()}}),e)})));function D(){}D.prototype.init=function(e){this.eGui=document.createElement("span");for(var n="",t=0;t<e.value;t++)n+="*";this.eGui.innerHTML=n},D.prototype.getGui=function(){return this.eGui};var h=Object(o.a)(i.a.mark((function e(){return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(new l.a).setUpAgGridLicence(),y(),e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\n\nimport { GridOptions, ColDef } from '@ag-grid-community/all-modules';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    Tabs: [\n      {\n        Name: 'Grid',\n        Toolbars: ['Layout', 'Filter'],\n      },\n    ],\n  },\n  FormatColumn: {\n    FormatColumns: [\n      {\n        Scope: {\n          ColumnIds: ['price'],\n        },\n        CellAlignment: 'Right',\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            IntegerSeparator: ',',\n          },\n        },\n      },\n      {\n        Scope: {\n          ColumnIds: ['firstBought'],\n        },\n        CellAlignment: 'Center',\n        DisplayFormat: {\n          Formatter: 'DateFormatter',\n          Options: {\n            Pattern: 'yyyyMMdd',\n          },\n        },\n      },\n    ],\n  },\n} as PredefinedConfig;\n\n// Create columns referencing the formatters\nconst columnSchema: ColDef[] = [\n  {\n    headerName: 'Make',\n    field: 'make',\n    filter: true,\n    editable: false,\n    type: 'abColDefString',\n  },\n  {\n    headerName: 'Model',\n    field: 'model',\n    filter: true,\n    editable: false,\n    type: 'abColDefString',\n  },\n  {\n    headerName: 'Price',\n    field: 'price',\n    filter: true,\n    editable: false,\n    type: 'abColDefNumber',\n  },\n  {\n    headerName: 'Miles To Gallon',\n    field: 'milesToGallon',\n    filter: true,\n    editable: false,\n    type: 'abColDefNumber',\n    valueFormatter: (params: any) => {\n      return params.value\n        ? params.value.toLocaleString('en-US', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n          })\n        : null;\n    },\n  },\n  {\n    headerName: 'First Used',\n    field: 'firstUsed',\n    filter: true,\n    editable: false,\n    type: 'abColDefDate',\n    valueFormatter: (params: any) => {\n      return params.value\n        ? new Intl.DateTimeFormat('en-GB').format(params.value)\n        : '';\n    },\n  },\n  {\n    headerName: 'First Bought',\n    field: 'firstBought',\n    filter: true,\n    editable: false,\n    type: 'abColDefDate',\n  },\n  {\n    headerName: 'Energy Rating',\n    field: 'EnergyRating',\n    enableValue: true,\n    editable: true,\n    sortable: true,\n    //@ts-ignore\n    cellRenderer: RatingRenderer,\n    type: 'abColDefNumber',\n    filter: true,\n    enablePivot: true,\n    resizable: true,\n  },\n  {\n    headerName: 'Efficency Rating',\n    field: 'EfficencyRating',\n    enableValue: true,\n    editable: true,\n    sortable: true,\n    valueFormatter: (params: any) => {\n      let text = '';\n      for (var i = 0; i < params.value; i++) {\n        text += '*';\n      }\n      return text;\n    },\n    type: 'abColDefNumber',\n    filter: true,\n    enablePivot: true,\n    resizable: true,\n  },\n  {\n    // this column does not have a field as its not typed to a single cell in the datasource\n    // its not mandatory but if the colid can be provided then that would be helpful for Adaptable to do complex filtering\n    headerName: 'Composite',\n    editable: false,\n    colId: 'composite',\n    filter: true,\n    enableRowGroup: true,\n    valueGetter: (params: any) => {\n      return params.data && params.data.make && params.data.model\n        ? params.data.make + ' - ' + params.data.model\n        : undefined;\n    },\n    type: 'abColDefString',\n  },\n];\n\nconst rowdata: any[] = [\n  {\n    make: 'Toyota',\n    model: 'Celica',\n    price: 35000,\n    firstUsed: new Date(2017, 11, 4),\n    firstBought: new Date(2017, 11, 4),\n    milesToGallon: 21.345676,\n    EnergyRating: 1,\n    EfficencyRating: 2,\n  },\n  {\n    make: 'Toyota',\n    model: 'Yaris',\n    price: 40000,\n    firstUsed: new Date(2013, 1, 15),\n    firstBought: new Date(2013, 1, 15),\n    milesToGallon: 29.32432423,\n    EnergyRating: 4,\n    EfficencyRating: 1,\n  },\n  {\n    make: 'Toyota',\n    model: 'Corolla',\n    price: 28000,\n    firstUsed: new Date(2017, 6, 9),\n    firstBought: new Date(2017, 6, 9),\n    milesToGallon: 32.9032523473287,\n    EnergyRating: 5,\n    EfficencyRating: 2,\n  },\n  {\n    make: 'Ford',\n    model: 'Mondeo',\n    price: 32000,\n    firstUsed: new Date(2009, 10, 2),\n    firstBought: new Date(2009, 10, 2),\n    milesToGallon: 28.247893473289,\n    EnergyRating: 4,\n    EfficencyRating: 2,\n  },\n  {\n    make: 'Ford',\n    model: 'Fiesta',\n    price: 35000,\n    firstUsed: new Date(2018, 8, 12),\n    firstBought: new Date(2018, 8, 12),\n    milesToGallon: 34.0001,\n    EnergyRating: 5,\n    EfficencyRating: 3,\n  },\n  {\n    make: 'Ford',\n    model: 'Focus',\n    price: 26750,\n    firstUsed: new Date(2017, 3, 3),\n    firstBought: new Date(2017, 3, 3),\n    milesToGallon: 31.2432432423,\n    EnergyRating: 3,\n    EfficencyRating: 1,\n  },\n  {\n    make: 'Ford',\n    model: 'Galaxy',\n    price: 41000,\n    firstUsed: new Date(2015, 4, 14),\n    firstBought: new Date(2015, 4, 14),\n    milesToGallon: 29.29432404,\n    EnergyRating: 2,\n    EfficencyRating: 5,\n  },\n  {\n    make: 'Porsche',\n    model: 'Boxter',\n    price: 72500,\n    firstUsed: new Date(2016, 1, 28),\n    firstBought: new Date(2016, 1, 28),\n    milesToGallon: 32.29580292,\n    EnergyRating: 4,\n    EfficencyRating: 4,\n  },\n  {\n    make: 'Porsche',\n    model: 'Mission',\n    price: 81000,\n    firstUsed: new Date(2008, 10, 7),\n    firstBought: new Date(2008, 10, 7),\n    milesToGallon: 35.7822957,\n    EnergyRating: 5,\n    EfficencyRating: 2,\n  },\n  {\n    make: 'Mitsubbishi',\n    model: 'Outlander',\n    price: 97800,\n    firstUsed: new Date(2017, 11, 14),\n    firstBought: new Date(2017, 11, 14),\n    milesToGallon: 19.224309,\n    EnergyRating: 4,\n    EfficencyRating: 5,\n  },\n];\n\nexport default async () => {\n  const gridOptions: GridOptions = {\n    columnDefs: columnSchema,\n    //  rowData: rowdata,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressAggFuncInHeader: true,\n    suppressMenuHide: true,\n    // this is not strictly required but very useful for column data type identification\n    // if not used then the grid will try to work out the datatype of the column based on the initial value\n    columnTypes: {\n      abColDefNumber: {},\n      abColDefString: {},\n      abColDefBoolean: {},\n      abColDefDate: {},\n      abColDefObject: {},\n      abColDefNumberArray: {},\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'model',\n    userName: 'Demo User',\n    adaptableId: 'Setup Columns Demo',\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n\n  let adaptableApi = await Adaptable.init(adaptableOptions);\n\n  adaptableApi.eventApi.on('AdaptableReady', () => {\n    setTimeout(() => {\n      // use the load data method in GridApi of AdaptableApi\n      adaptableApi.gridApi.loadGridData(rowdata);\n    }, 100);\n  });\n};\n\n/*\nThe Cell Render for Rating.\nWe provide implementations for the init and getGui methods.\n*/\nfunction RatingRenderer() {}\nRatingRenderer.prototype.init = function(params: any): any {\n  this.eGui = document.createElement('span');\n  var text = '';\n  for (var i = 0; i < params.value; i++) {\n    text += '*';\n  }\n  this.eGui.innerHTML = text;\n};\nRatingRenderer.prototype.getGui = function(): any {\n  return this.eGui;\n};\n"});case 4:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(a.useEffect)((function(){h().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);