(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[257],{"r/ok":function(e,n,a){"use strict";a.r(n);var t,r=a("q1tI"),o=a("o0o1"),l=a.n(o),i=a("HaE+"),s=(a("nX5y"),a("smsc")),d=a("ThKj"),u=a("rePB"),p=(a("PMha"),a("cUqQ"),a("5TJ6"),a("jWP/"),a("iMsr"),a("mbJ9")),c=a.n(p),m=a("mXS1");function f(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function b(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?f(Object(a),!0).forEach((function(n){Object(u.a)(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):f(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}var C={Filter:{ColumnFilters:[{ColumnId:"Employee",Predicate:{PredicateId:"new_starter"}},{ColumnId:"LastUpdatedTime",Predicate:{PredicateId:"after_work"}}]},FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["LastUpdatedTime"]},DisplayFormat:{Formatter:"DateFormatter",Options:{Pattern:"HH:mm:ss"}}}]}},g=function(){var e=Object(i.a)(l.a.mark((function e(n,a){var r;return l.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Custom Predicates Demo",customPredicateDefs:[{id:"high",label:"High",columnScope:{ColumnIds:["OrderId"]},functionScope:["filter","alert","validation","conditionalstyle"],handler:function(e){var n=e.node.data.InvoicedCost,a=e.node.data.ItemCount;return n>100&&a>10}},{id:"new_starter",label:"New Starter",columnScope:{ColumnIds:["Employee"]},functionScope:["filter"],handler:function(e){return"Robert King"==e.value||"Laura Callahan"==e.value||"Andrew Fuller"==e.value}},{id:"after_work",label:"After Work",columnScope:{ColumnIds:["LastUpdatedTime"]},functionScope:["filter"],handler:function(e){return e.value.getHours()>17}},{id:"post_takeover",label:"Post Takeover",columnScope:{DataTypes:["Date"]},functionScope:["filter"],handler:function(e){var n=new Date("2019-09-21");return e.value>n}}],predefinedConfig:C,vendorGrid:b(b({},{columnDefs:n,rowData:a,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,statusBar:{statusPanels:[{statusPanel:"agTotalRowCountComponent",align:"left"},{statusPanel:"agFilteredRowCountComponent"}]},columnTypes:{abColDefNumber:{},abColDefString:{},abColDefBoolean:{},abColDefDate:{},abColDefObject:{},abColDefNumberArray:{}}}),{},{modules:m.a})},e.next=4,c.a.init(r);case 4:return t=e.sent,e.abrupt("return",{adaptableOptions:r,adaptableApi:t});case 6:case"end":return e.stop()}}),e)})));return function(n,a){return e.apply(this,arguments)}}(),D=Object(i.a)(l.a.mark((function e(){var n,a,t,r,o;return l.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new d.a).setUpAgGridLicence(),a=JSON.parse(JSON.stringify(s)),n.convertExcelData(a),t=n.getFullNorthwindColumnSchema(),console.log(3),e.next=8,g(t,a);case 8:return r=e.sent,o=r.adaptableOptions,r.adaptableApi,o.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n  PredicateDefHandlerParams,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Filter: {\n    ColumnFilters: [\n      {\n        ColumnId: 'Employee',\n        Predicate: { PredicateId: 'new_starter' },\n      },\n      {\n        ColumnId: 'LastUpdatedTime',\n        Predicate: { PredicateId: 'after_work' },\n      },\n    ],\n  },\n  FormatColumn: {\n    FormatColumns: [\n      {\n        Scope: {\n          ColumnIds: ['LastUpdatedTime'],\n        },\n        DisplayFormat: {\n          Formatter: 'DateFormatter',\n          Options: {\n            Pattern: 'HH:mm:ss',\n          },\n        },\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    statusBar: {\n      statusPanels: [\n        { statusPanel: 'agTotalRowCountComponent', align: 'left' },\n        { statusPanel: 'agFilteredRowCountComponent' },\n      ],\n    },\n    columnTypes: {\n      abColDefNumber: {},\n      abColDefString: {},\n      abColDefBoolean: {},\n      abColDefDate: {},\n      abColDefObject: {},\n      abColDefNumberArray: {},\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Custom Predicates Demo',\n    customPredicateDefs: [\n      {\n        id: 'high',\n        label: 'High',\n        columnScope: {\n          ColumnIds: ['OrderId'],\n        },\n        functionScope: ['filter', 'alert', 'validation', 'conditionalstyle'],\n        handler(params: PredicateDefHandlerParams) {\n          let invoiced: number = params.node.data.InvoicedCost;\n          let itemCount: number = params.node.data.ItemCount;\n          return invoiced > 100 && itemCount > 10 ? true : false;\n        },\n      },\n      {\n        id: 'new_starter',\n        label: 'New Starter',\n        columnScope: {\n          ColumnIds: ['Employee'],\n        },\n        functionScope: ['filter'],\n        handler(params: PredicateDefHandlerParams) {\n          return (\n            params.value == 'Robert King' ||\n            params.value == 'Laura Callahan' ||\n            params.value == 'Andrew Fuller'\n          );\n        },\n      },\n      {\n        id: 'after_work',\n        label: 'After Work',\n        columnScope: {\n          ColumnIds: ['LastUpdatedTime'],\n        },\n        functionScope: ['filter'],\n        handler(params: PredicateDefHandlerParams) {\n          return (params.value as Date).getHours() > 17;\n        },\n      },\n      {\n        id: 'post_takeover',\n        label: 'Post Takeover',\n        columnScope: {\n          DataTypes: ['Date'],\n        },\n        functionScope: ['filter'],\n        handler(params: PredicateDefHandlerParams) {\n          let takeOverDate = new Date('2019-09-21');\n          return (params.value as Date) > takeOverDate;\n        },\n      },\n    ],\n\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 13:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(r.useEffect)((function(){D().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);