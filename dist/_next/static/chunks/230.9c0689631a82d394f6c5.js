(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[230],{RWhn:function(e,t,n){"use strict";n.r(t);var a,s=n("q1tI"),r=n("o0o1"),o=n.n(r),i=n("HaE+"),l=(n("nX5y"),n("smsc")),u=n("ThKj"),p=n("rePB"),c=(n("PMha"),n("cUqQ"),n("5TJ6"),n("jWP/"),n("iMsr"),n("mbJ9")),m=n.n(c),d=n("mXS1");function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){Object(p.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var f={Dashboard:{Tabs:[{Name:"Toolbars",Toolbars:["SystemStatus","DemoButtons"]}],CustomToolbars:[{Name:"DemoButtons",Title:"Demo Buttons",ToolbarButtons:[{Name:"info",Caption:"Set Info",ButtonStyle:{Variant:"text",Tone:"info"}},{Name:"success",Caption:"Set Success",ButtonStyle:{Variant:"text",Tone:"success"}},{Name:"warning",Caption:"Set Warning",ButtonStyle:{Variant:"text",Tone:"warning"}},{Name:"error",Caption:"Set Error",ButtonStyle:{Variant:"text",Tone:"error"}},{Name:"clear",Caption:"Clear Message"}]}]},SystemStatus:{ShowAlert:!1,StatusMessage:"Server running slowly",StatusType:"Warning"}},y=function(){var e=Object(i.a)(o.a.mark((function e(t,n){var s;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return s={primaryKey:"OrderId",userName:"Demo User",adaptableId:"System Status Demo",predefinedConfig:f,vendorGrid:S(S({},{columnDefs:t,rowData:n,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0},columnTypes:{abColDefNumber:{},abColDefString:{},abColDefBoolean:{},abColDefDate:{},abColDefObject:{},abColDefNumberArray:{}}}),{},{modules:d.a})},e.next=4,m.a.init(s);case 4:return(a=e.sent).eventApi.on("ToolbarButtonClicked",(function(e){switch(e.data[0].id.toolbarButton.Name){case"info":a.systemStatusApi.setInfoSystemStatus("No issues");break;case"success":a.systemStatusApi.setSuccessSystemStatus("All working fine");break;case"warning":a.systemStatusApi.setWarningSystemStatus("Problems with server");break;case"error":a.systemStatusApi.setErrorSystemStatus("The server is down!","Please do not make any edits until the server comes back up");break;case"clear":a.systemStatusApi.clearSystemStatus()}})),e.abrupt("return",{adaptableOptions:s,adaptableApi:a});case 7:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),g=Object(i.a)(o.a.mark((function e(){var t,n,a,s,r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new u.a).setUpAgGridLicence(),n=JSON.parse(JSON.stringify(l)),t.convertExcelData(n),a=t.getBasicNorthwindColumnSchema(),e.next=7,y(a,n);case 7:return s=e.sent,r=s.adaptableOptions,s.adaptableApi,r.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    Tabs: [\n      {\n        Name: 'Toolbars',\n        Toolbars: ['SystemStatus', 'DemoButtons'],\n      },\n    ],\n    CustomToolbars: [\n      {\n        Name: 'DemoButtons',\n        Title: 'Demo Buttons',\n        ToolbarButtons: [\n          {\n            Name: 'info',\n            Caption: 'Set Info',\n            ButtonStyle: {\n              Variant: 'text',\n              Tone: 'info',\n            },\n          },\n          {\n            Name: 'success',\n            Caption: 'Set Success',\n            ButtonStyle: {\n              Variant: 'text',\n              Tone: 'success',\n            },\n          },\n          {\n            Name: 'warning',\n            Caption: 'Set Warning',\n            ButtonStyle: {\n              Variant: 'text',\n              Tone: 'warning',\n            },\n          },\n          {\n            Name: 'error',\n            Caption: 'Set Error',\n            ButtonStyle: {\n              Variant: 'text',\n              Tone: 'error',\n            },\n          },\n          {\n            Name: 'clear',\n            Caption: 'Clear Message',\n            //   Variant: 'raised',\n          },\n        ],\n      },\n    ],\n  },\n  SystemStatus: {\n    ShowAlert: false,\n    //  DefaultStatusMessage: 'Everything is fine',\n    //  DefaultStatusType: 'Success',\n    StatusMessage: 'Server running slowly',\n    StatusType: 'Warning',\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n    },\n    columnTypes: {\n      abColDefNumber: {},\n      abColDefString: {},\n      abColDefBoolean: {},\n      abColDefDate: {},\n      abColDefObject: {},\n      abColDefNumberArray: {},\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'System Status Demo',\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  adaptableApi.eventApi.on(\n    'ToolbarButtonClicked',\n    toolbarButtonClickedEventArgs => {\n      switch (toolbarButtonClickedEventArgs.data[0].id.toolbarButton.Name) {\n        case 'info':\n          adaptableApi.systemStatusApi.setInfoSystemStatus('No issues');\n          break;\n        case 'success':\n          adaptableApi.systemStatusApi.setSuccessSystemStatus(\n            'All working fine'\n          );\n          break;\n        case 'warning':\n          adaptableApi.systemStatusApi.setWarningSystemStatus(\n            'Problems with server'\n          );\n          break;\n        case 'error':\n          adaptableApi.systemStatusApi.setErrorSystemStatus(\n            'The server is down!',\n            'Please do not make any edits until the server comes back up'\n          );\n          break;\n        case 'clear':\n          adaptableApi.systemStatusApi.clearSystemStatus();\n          break;\n      }\n    }\n  );\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 12:case"end":return e.stop()}}),e)})));t.default=function(e){return Object(s.useEffect)((function(){g().then((function(t){e.onReady&&e.onReady(t)}))}),[]),null}}}]);