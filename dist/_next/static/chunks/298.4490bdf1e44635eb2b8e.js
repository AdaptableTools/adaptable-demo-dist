(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[298],{cl4H:function(e,t,n){"use strict";n.r(t);var r=n("q1tI"),a=n("o0o1"),i=n.n(a),s=n("HaE+"),o=(n("nX5y"),n("ThKj")),u=n("1OyB"),l=n("vuIU"),d=n("rePB"),c=(n("PMha"),n("5TJ6"),n("jWP/"),n("mbJ9")),p=n.n(c),m=n("DR3G"),f=n("mXS1"),h=n("LvDl"),I=n("EhJz"),g=n("dndX"),b=n("TjGc"),y=n("1PZI"),w=n("jZMG"),v=n("3+Em"),S=n("u/yc"),R=n("w3Pf"),A=n("MkVN"),P=n("HZtn"),T=n("uh5Q"),D=n("G6Tw"),O=n("YzQ+");function C(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){Object(d.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var F=function(){var e=Object(s.a)(i.a.mark((function e(t){var n,r,a,s,o;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={columnDefs:t,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,rowModelType:"serverSide",serverSideStoreType:m.ServerSideStoreType.Partial},r={primaryKey:"tradeId",userName:"Demo User",adaptableId:"Server Row Model Demo",predefinedConfig:{Dashboard:{Tabs:[{Name:"Server Demo Toolbar",Toolbars:["Query","Export","Layout","SystemStatus","Filter"]}]},UserInterface:{PermittedValuesItems:[{Scope:{All:!0},GetColumnValuesFunction:"GetUniqueColumnValues"}]}},vendorGrid:k(k({},n),{},{modules:f.a}),userFunctions:[{name:"GetUniqueColumnValues",type:"GetColumnValuesFunction",handler:function(e){return s.getUniqueColumnValues(e)}}]},e.next=4,p.a.init(r);case 4:return a=e.sent,s=new G(a),o=new N(s,a),r.vendorGrid.api.setServerSideDatasource(o),a.eventApi.on("AdaptableReady",(function(e){})),e.abrupt("return",{adaptableOptions:r,adaptableApi:a});case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),N=function(){function e(t,n){Object(u.a)(this,e),this.server=t,this.adaptableApi=n}return Object(l.a)(e,[{key:"getRows",value:function(e){var t=this.server.fetchServerData(e.request.startRow,e.request.endRow-e.request.startRow,this.currentAdaptableSearchState,this.currentAdaptableSortState);e.success({rowData:t,rowCount:t.length?-1:0})}},{key:"currentAdaptableSearchState",get:function(){return this.adaptableApi.configApi.getAdaptableSearchState()}},{key:"currentAdaptableSortState",get:function(){return this.adaptableApi.configApi.getAdaptableSortState()}}]),e}(),G=function(){function e(t){Object(u.a)(this,e),this.adaptableApi=t,Object(d.a)(this,"dummyTrades",void 0),this.dummyTrades=this.createDummyData()}return Object(l.a)(e,[{key:"fetchServerData",value:function(e,t,n,r){var a,i=this.dummyTrades;if(n.currentQuery&&(i=this.evaluateQueryFunction(i,n.currentQuery)),null!==(a=n.columnFilters)&&void 0!==a&&a.length&&(i=this.evaluateFilterFunction(i,n.columnFilters)),r.columnSorts.length){var s=[],o=[];r.columnSorts.forEach((function(e){s.push(e.ColumnId),o.push(e.SortOrder.toLowerCase())})),i=Object(h.orderBy)(i,s,o)}return i.slice(e,e+t)}},{key:"getUniqueColumnValues",value:function(e){var t=Object(h.uniqBy)(this.dummyTrades,e.ColumnId).map((function(t){return t[e.ColumnId]})).filter((function(e){return void 0!=e}));return"Date"==e.DataType?t.map((function(e){return e.toDateString()})):t}},{key:"evaluateQueryFunction",value:function(e,t){var n=this;return e.filter((function(e){return Object(O.evaluate)(t,{node:{data:e},api:n.adaptableApi,functions:O.defaultFunctions})}))}},{key:"evaluateFilterFunction",value:function(e,t){var n=this,r=e;return t.forEach((function(e){var t,a=e.Predicate;null!=a.Inputs&&a.Inputs.length>0&&(t=a.Inputs[0]);var i=e.ColumnId;if("Blanks"==a.PredicateId)r=r.filter((function(e){return null==e[i]||void 0==e[i]||""==e[i]}));else if("NonBlanks"==a.PredicateId)r=r.filter((function(e){return null!=e[i]&&void 0!=e[i]&&""!=e[i]}));else if("Values"==a.PredicateId)r=r.filter((function(e){var t;return null!=e[i]&&void 0!=e[i]&&(null===(t=a.Inputs)||void 0===t?void 0:t.includes(e[i]))}));else switch(r=r.filter((function(e){return void 0!=e[i]})),n.adaptableApi.columnApi.getColumnDataTypeFromColumnId(e.ColumnId)){case"Boolean":"True"==a.PredicateId?r=r.filter((function(e){return 1==e[i]})):"False"==a.PredicateId&&(r=r.filter((function(e){return 0==e[i]})));break;case"String":"Is"==a.PredicateId&&t?r=r.filter((function(e){return e[i]==t})):"IsNot"==a.PredicateId&&t?r=r.filter((function(e){return e[i]!==t})):"Contains"==a.PredicateId&&t?r=r.filter((function(e){return e[i].includes(t)})):"StartsWith"==a.PredicateId&&t?r=r.filter((function(e){return e[i].startsWith(t)})):"EndsWith"==a.PredicateId&&t?r=r.filter((function(e){return e[i].endsWith(t)})):"Regex"==a.PredicateId&&t&&(r=r.filter((function(e){return new RegExp(t).test(e[i])})));break;case"Number":if("Equals"==a.PredicateId&&t)r=r.filter((function(e){return e[i]==t}));else if("NotEquals"==a.PredicateId&&t)r=r.filter((function(e){return e[i]!==t}));else if("GreaterThan"==a.PredicateId&&t)r=r.filter((function(e){return Number(e[i])>Number(t)}));else if("LessThan"==a.PredicateId&&t)r=r.filter((function(e){return Number(e[i])<Number(t)}));else if("Positive"==a.PredicateId)r=r.filter((function(e){return Number(e[i])>0}));else if("Negative"==a.PredicateId)r=r.filter((function(e){return Number(e[i])<0}));else if("Between"==a.PredicateId&&t){var s=a.Inputs[1];s&&(r=r.filter((function(e){return Number(e[i])>t&&Number(e[i])<s})))}else if("NotBetween"==a.PredicateId&&t){var o=a.Inputs[1];o&&(r=r.filter((function(e){return Number(e[i])<t||Number(e[i])>o})))}break;case"Date":"On"==a.PredicateId&&t?r=r.filter((function(e){return e[i]==t})):"NotOn"==a.PredicateId&&t?r=r.filter((function(e){return e[i]!==t})):"After"==a.PredicateId&&t?r=r.filter((function(e){return Object(I.default)(e[i],t)})):"Before"==a.PredicateId&&t?r=r.filter((function(e){return Object(g.default)(e[i],t)})):"Today"==a.PredicateId?r=r.filter((function(e){return Object(b.default)(e[i])})):"Yesterday"==a.PredicateId?r=r.filter((function(e){return Object(y.default)(e[i])})):"Tomorrow"==a.PredicateId?r=r.filter((function(e){return Object(w.default)(e[i])})):"ThisWeek"==a.PredicateId?r=r.filter((function(e){return Object(v.default)(e[i])})):"ThisMonth"==a.PredicateId?r=r.filter((function(e){return Object(S.default)(e[i])})):"ThisQuarter"==a.PredicateId?r=r.filter((function(e){return Object(R.default)(e[i])})):"ThisYear"==a.PredicateId?r=r.filter((function(e){return Object(A.default)(e[i])})):"InPast"==a.PredicateId?r=r.filter((function(e){return Object(P.default)(e[i])})):"InFuture"==a.PredicateId?r=r.filter((function(e){return Object(T.default)(e[i])})):"NextWorkDay"==a.PredicateId?r=r.filter((function(e){return Object(D.default)(e[i],n.adaptableApi.calendarApi.getNextWorkingDay())})):"NextWorkDay"==a.PredicateId&&(r=r.filter((function(e){return Object(D.default)(e[i],n.adaptableApi.calendarApi.getPreviousWorkingDay())})))}})),r}},{key:"createDummyData",value:function(){for(var e=new o.a,t=[],n=1;n<=2e5;n++)t.push(e.createTrade(n));return t}}]),e}(),j=Object(s.a)(i.a.mark((function e(){var t,n,r;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new o.a).setUpAgGridLicence(),n=t.getBasicTradeSchema(),e.next=5,F(n);case 5:return r=e.sent,r.adaptableOptions.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport {\n  GridOptions,\n  ColDef,\n  ServerSideStoreType,\n  IServerSideDatasource,\n  IServerSideGetRowsParams,\n} from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  AdaptableApi,\n  AdaptableReadyInfo,\n  AdaptableSearchState,\n  ColumnFilter,\n  AdaptableColumn,\n  AdaptableSortState,\n  ColumnSort,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\nimport { ITrade } from '../../../Helpers/Trade';\nimport { HelperAgGrid } from '../../../Helpers/HelperAgGrid';\nimport { orderBy, uniqBy } from 'lodash';\nimport {\n  isAfter,\n  isBefore,\n  isFuture,\n  isPast,\n  isSameDay,\n  isThisMonth,\n  isThisQuarter,\n  isThisWeek,\n  isThisYear,\n  isToday,\n  isTomorrow,\n  isYesterday,\n} from 'date-fns';\nimport {\n  evaluate,\n  defaultFunctions,\n} from '@adaptabletools/adaptable/src/parser/src';\n\n// 1. the Server-Side Row Model is selected using the grid options property: rowModelType = 'serverSide'\n// 2. the ServerSideDatasource (implementing IServerSideDatasource) is registered with the grid using the vendor grid api: api.setServerSideDatasource(datasource)\n//    the datasource instance exposes the 'getRows()' function, which is automatically called everytime the grid requires more rows\n// 3. the datasource fetches the grid data from a FakeServer instance - which is just a mock replacement for a real server implementation\n// 4. additional server-side data (required for AdapTable specific functions) may be fetched from the server.\n//    This example demonstrates how you can pass AdapTable the values it needs to show in filter dropdowns - see 'GetUniqueColumnValues' defined in adaptableOptions.userFunctions\n//    It retrieves all the distinct values from the server - this is invoked in UserFunctions section of AdaptableOptions\nexport default async (columnDefs: ColDef[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    // select SSRM\n    rowModelType: 'serverSide',\n    serverSideStoreType: ServerSideStoreType.Partial,\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'tradeId',\n    userName: 'Demo User',\n    adaptableId: 'Server Row Model Demo',\n    predefinedConfig: {\n      Dashboard: {\n        Tabs: [\n          {\n            Name: 'Server Demo Toolbar',\n            Toolbars: ['Query', 'Export', 'Layout', 'SystemStatus', 'Filter'],\n          },\n        ],\n      },\n      UserInterface: {\n        PermittedValuesItems: [\n          {\n            Scope: {\n              All: true,\n            },\n            GetColumnValuesFunction: 'GetUniqueColumnValues',\n          },\n        ],\n      },\n    },\n    vendorGrid: {\n      ...gridOptions,\n      modules: AllEnterpriseModules,\n    },\n    // provide an implementation for the 'GetColumnValuesFunction' to get unique values\n    // this is paired with PermittedValues in PredefinedConfig\n    userFunctions: [\n      {\n        name: 'GetUniqueColumnValues',\n        type: 'GetColumnValuesFunction',\n        handler(column: AdaptableColumn) {\n          // Retrieve the unique column values (from the server)\n          return fakeServer.getUniqueColumnValues(column);\n        },\n      },\n    ],\n  };\n\n  const adaptableApi = await Adaptable.init(adaptableOptions);\n\n  const fakeServer = new FakeServer(adaptableApi);\n  const datasource = new ServerSideDatasource(fakeServer, adaptableApi);\n\n  // register the Server-Side Datasource using the AG Grid API\n  adaptableOptions.vendorGrid.api.setServerSideDatasource(datasource);\n\n  adaptableApi.eventApi.on('AdaptableReady', (info: AdaptableReadyInfo) => {});\n  return { adaptableOptions, adaptableApi };\n};\n\n/**\n * The main point of this example is that you may pass to the server-side both:\n *  1. AG Grid specific information, provided by IServerSideGetRowsParams: startRow, rowGroupCols, pivotCols etc.\n *  2. AdaptTable specific information, provided by AdaptableApi: AdaptableSearchState, AdaptableSortState etc.\n */\nclass ServerSideDatasource implements IServerSideDatasource {\n  constructor(private server: FakeServer, private adaptableApi: AdaptableApi) {}\n\n  getRows(params: IServerSideGetRowsParams): void {\n    // fetch the server-side data\n    const response = this.server.fetchServerData(\n      params.request.startRow,\n      params.request.endRow - params.request.startRow,\n      // current search & filter state in the grid\n      this.currentAdaptableSearchState,\n      // current sorting state in the grid\n      this.currentAdaptableSortState\n    );\n\n    params.success({\n      rowData: response,\n      // rowCount has to be defined, otherwise AG Grid does NOT refresh correctly the rows\n      rowCount: !!response.length ? -1 : 0,\n    });\n  }\n\n  get currentAdaptableSearchState() {\n    return this.adaptableApi.configApi.getAdaptableSearchState();\n  }\n\n  get currentAdaptableSortState() {\n    return this.adaptableApi.configApi.getAdaptableSortState();\n  }\n}\n\n/**\n * This slightly contrived fake server mimics what will happen on a real server.\n * The implementation details (especially the dependency on the AdaptableApi!) are not relevant for a real use case.\n */\nclass FakeServer {\n  private dummyTrades: ITrade[];\n\n  constructor(private adaptableApi: AdaptableApi) {\n    this.dummyTrades = this.createDummyData();\n  }\n\n  // in the real world this will be done on the server, probably with SQL or similar structures\n  // the implementation (especially the dependency on the AdaptableApi is not relevant for a real use case)\n  // important here is the possibility to evaluate & process both AG Grid and AdapTable functions\n  fetchServerData(\n    startRowIndex: number,\n    count: number,\n    searchState: AdaptableSearchState,\n    sortState: AdaptableSortState\n  ): ITrade[] {\n    let matchingRows = this.dummyTrades;\n\n    // evaluate queries if present\n    // it is also possible (and probably more practical) to evaluate the query Abstract Syntax Tree (searchState.queryAST) directly\n    if (!!searchState.currentQuery) {\n      matchingRows = this.evaluateQueryFunction(\n        matchingRows,\n        searchState.currentQuery!\n      );\n    }\n\n    // evaluate filters if present\n    if (!!searchState.columnFilters?.length) {\n      matchingRows = this.evaluateFilterFunction(\n        matchingRows,\n        searchState.columnFilters!\n      );\n    }\n\n    // apply sorting\n    if (!!sortState.columnSorts.length) {\n      let sortedColumns: string[] = [];\n      let sortDirections: string[] = [];\n      sortState.columnSorts.forEach((cs: ColumnSort) => {\n        sortedColumns.push(cs.ColumnId);\n        sortDirections.push(cs.SortOrder.toLowerCase());\n      });\n      matchingRows = orderBy(\n        matchingRows,\n        sortedColumns,\n        sortDirections as any\n      );\n    }\n\n    return matchingRows.slice(startRowIndex, startRowIndex + count);\n  }\n\n  // Retrieves all the distinct values for a column\n  // it demonstrates how you can pass AdapTable the values it needs to show in filter dropdowns when running in server mode\n  getUniqueColumnValues(column: AdaptableColumn): any[] {\n    let returnVals = uniqBy(this.dummyTrades, column.ColumnId)\n      .map((t: any) => {\n        return t[column.ColumnId];\n      })\n      .filter((v: any) => v != undefined);\n\n    if (column.DataType == 'Date') {\n      let formatDateValues = returnVals.map((v: Date) => {\n        return v.toDateString();\n      });\n      return formatDateValues;\n    } else {\n      return returnVals;\n    }\n  }\n\n  private evaluateQueryFunction(tradeEntries: ITrade[], query: string) {\n    return tradeEntries.filter(rowData =>\n      evaluate(query, {\n        node: { data: rowData },\n        api: this.adaptableApi,\n        functions: defaultFunctions,\n      })\n    );\n  }\n\n  private evaluateFilterFunction(\n    tradeEntries: ITrade[],\n    columnFilters: ColumnFilter[]\n  ) {\n    let matchingRows = tradeEntries;\n\n    columnFilters.forEach((columnFilter: ColumnFilter) => {\n      let predicate = columnFilter.Predicate;\n      let firstInput: any;\n      if (predicate.Inputs != null && predicate.Inputs.length > 0) {\n        firstInput = predicate.Inputs[0];\n      }\n      let columnId: string = columnFilter.ColumnId;\n\n      // Blanks, Non-Blanks and Values (a.k.a. IN) work across all DataTypes\n      if (predicate.PredicateId == 'Blanks') {\n        matchingRows = matchingRows.filter(\n          (t: any) =>\n            t[columnId] == null || t[columnId] == undefined || t[columnId] == ''\n        );\n      } else if (predicate.PredicateId == 'NonBlanks') {\n        matchingRows = matchingRows.filter(\n          (t: any) =>\n            t[columnId] != null && t[columnId] != undefined && t[columnId] != ''\n        );\n      } else if (predicate.PredicateId == 'Values') {\n        matchingRows = matchingRows.filter(\n          (t: any) =>\n            t[columnId] != null &&\n            t[columnId] != undefined &&\n            predicate.Inputs?.includes(t[columnId])\n        );\n      } else {\n        // Remove any empty values\n        matchingRows = matchingRows.filter(\n          (t: any) => t[columnId] != undefined\n        );\n        // work out the predicate based on the column's datatype using an an AdaptableApi.ColumnApi method\n        switch (\n          this.adaptableApi.columnApi.getColumnDataTypeFromColumnId(\n            columnFilter.ColumnId\n          )\n        ) {\n          case 'Boolean':\n            if (predicate.PredicateId == 'True') {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] == true\n              );\n            } else if (predicate.PredicateId == 'False') {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] == false\n              );\n            }\n            break;\n\n          case 'String':\n            if (predicate.PredicateId == 'Is' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] == firstInput\n              );\n            } else if (predicate.PredicateId == 'IsNot' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] !== firstInput\n              );\n            } else if (predicate.PredicateId == 'Contains' && firstInput) {\n              matchingRows = matchingRows.filter((t: any) =>\n                t[columnId].includes(firstInput)\n              );\n            } else if (predicate.PredicateId == 'StartsWith' && firstInput) {\n              matchingRows = matchingRows.filter((t: any) =>\n                t[columnId].startsWith(firstInput)\n              );\n            } else if (predicate.PredicateId == 'EndsWith' && firstInput) {\n              matchingRows = matchingRows.filter((t: any) =>\n                t[columnId].endsWith(firstInput)\n              );\n            } else if (predicate.PredicateId == 'Regex' && firstInput) {\n              matchingRows = matchingRows.filter((t: any) =>\n                new RegExp(firstInput).test(t[columnId])\n              );\n            }\n            break;\n\n          case 'Number':\n            if (predicate.PredicateId == 'Equals' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] == firstInput\n              );\n            } else if (predicate.PredicateId == 'NotEquals' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] !== firstInput\n              );\n            } else if (predicate.PredicateId == 'GreaterThan' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => Number(t[columnId]) > Number(firstInput)\n              );\n            } else if (predicate.PredicateId == 'LessThan' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => Number(t[columnId]) < Number(firstInput)\n              );\n            } else if (predicate.PredicateId == 'Positive') {\n              matchingRows = matchingRows.filter(\n                (t: any) => Number(t[columnId]) > 0\n              );\n            } else if (predicate.PredicateId == 'Negative') {\n              matchingRows = matchingRows.filter(\n                (t: any) => Number(t[columnId]) < 0\n              );\n            } else if (predicate.PredicateId == 'Between' && firstInput) {\n              let secondInput: any = predicate!.Inputs![1];\n              if (secondInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) =>\n                    Number(t[columnId]) > firstInput &&\n                    Number(t[columnId]) < secondInput\n                );\n              }\n            } else if (predicate.PredicateId == 'NotBetween' && firstInput) {\n              let secondInput: any = predicate!.Inputs![1];\n              if (secondInput) {\n                matchingRows = matchingRows.filter(\n                  (t: any) =>\n                    Number(t[columnId]) < firstInput ||\n                    Number(t[columnId]) > secondInput\n                );\n              }\n            }\n            break;\n\n          case 'Date':\n            if (predicate.PredicateId == 'On' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] == firstInput\n              );\n            } else if (predicate.PredicateId == 'NotOn' && firstInput) {\n              matchingRows = matchingRows.filter(\n                (t: any) => t[columnId] !== firstInput\n              );\n            } else if (predicate.PredicateId == 'After' && firstInput) {\n              matchingRows = matchingRows.filter((t: any) =>\n                isAfter(t[columnId], firstInput)\n              );\n            } else if (predicate.PredicateId == 'Before' && firstInput) {\n              matchingRows = matchingRows.filter((t: any) =>\n                isBefore(t[columnId], firstInput)\n              );\n            } else if (predicate.PredicateId == 'Today') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isToday(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'Yesterday') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isYesterday(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'Tomorrow') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isTomorrow(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'ThisWeek') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isThisWeek(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'ThisMonth') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isThisMonth(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'ThisQuarter') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isThisQuarter(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'ThisYear') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isThisYear(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'InPast') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isPast(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'InFuture') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isFuture(t[columnId])\n              );\n            } else if (predicate.PredicateId == 'NextWorkDay') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isSameDay(\n                  t[columnId],\n                  this.adaptableApi.calendarApi.getNextWorkingDay()\n                )\n              );\n            } else if (predicate.PredicateId == 'NextWorkDay') {\n              matchingRows = matchingRows.filter((t: any) =>\n                isSameDay(\n                  t[columnId],\n                  this.adaptableApi.calendarApi.getPreviousWorkingDay()\n                )\n              );\n            }\n            break;\n        }\n      }\n    });\n    return matchingRows;\n  }\n\n  private createDummyData() {\n    // create an inital dataset with 200,000 rows (to mimic many rows on the server)\n    const helperAgGrid = new HelperAgGrid();\n    const dummyData = [];\n    for (let i = 1; i <= 200_000; i++) {\n      dummyData.push(helperAgGrid.createTrade(i));\n    }\n    return dummyData;\n  }\n}\n"});case 9:case"end":return e.stop()}}),e)})));t.default=function(e){return Object(r.useEffect)((function(){j().then((function(t){e.onReady&&e.onReady(t)}))}),[]),null}}}]);