(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[267],{"5zhm":function(e,n,t){"use strict";t.r(n);var a,r=t("q1tI"),o=t("o0o1"),l=t.n(o),i=t("HaE+"),s=(t("nX5y"),t("smsc")),u=t("ThKj"),d=t("rePB"),m=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("mbJ9")),c=t.n(m),p=t("mXS1");function b(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?b(Object(t),!0).forEach((function(n){Object(d.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):b(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var C={UserInterface:{PermittedValuesItems:[{Scope:{ColumnIds:["ContactName"]},PermittedValues:["Elizabeth Lincoln","Mario Pontes","Maria Larsson","Roland Mendel","Catherine Dewey","Carlos Hern\xe1ndez","Elizabeth Lincoln","Art Braunschweiger","Daniel Tonini","Carine Schmitt","Mart\xedn Sommer","Pedro Afonso"]},{Scope:{ColumnIds:["Employee"]},PermittedValues:["Janet Leverling","Robert King","Summer Intern"]},{Scope:{ColumnIds:["OrderDate"]},PermittedValues:[""]},{Scope:{ColumnIds:["ItemCount"]},PermittedValues:[""]},{Scope:{ColumnIds:["CustomerReference"]},GetColumnValuesFunction:"PermittedValuesForCustomer"}]}},y=function(){var e=Object(i.a)(l.a.mark((function e(n,t){var r;return l.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Permitted Values Demo",userFunctions:[{name:"PermittedValuesForCustomer",type:"GetColumnValuesFunction",handler:function(e){return["PRINI","SPLIR","BOTTM","ERNSH","HUNGO","REGGC"]}}],predefinedConfig:C,vendorGrid:f(f({},{columnDefs:n,rowData:t,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0},columnTypes:{abColDefNumber:{},abColDefString:{},abColDefBoolean:{},abColDefDate:{},abColDefObject:{},abColDefNumberArray:{}}}),{},{modules:p.a})},e.next=4,c.a.init(r);case 4:return a=e.sent,e.abrupt("return",{adaptableOptions:r,adaptableApi:a});case 6:case"end":return e.stop()}}),e)})));return function(n,t){return e.apply(this,arguments)}}(),g=Object(i.a)(l.a.mark((function e(){var n,t,a,r,o;return l.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=new u.a).setUpAgGridLicence(),t=JSON.parse(JSON.stringify(s)),n.convertExcelData(t),a=n.getBasicNorthwindColumnSchema(),e.next=7,y(a,t);case 7:return r=e.sent,o=r.adaptableOptions,r.adaptableApi,o.vendorGrid.onGridReady=function(e){e.columnApi.autoSizeAllColumns(),setTimeout((function(){return e.columnApi.autoSizeAllColumns()}),1),e.api.addEventListener("newColumnsLoaded",(function(){e.columnApi.autoSizeAllColumns()})),e.api.closeToolPanel()},e.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n  AdaptableColumn,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  UserInterface: {\n    PermittedValuesItems: [\n      {\n        // For Contact Name column we return a hard coded list that will always be used\n        Scope: {\n          ColumnIds: ['ContactName'],\n        },\n        PermittedValues: [\n          'Elizabeth Lincoln',\n          'Mario Pontes',\n          'Maria Larsson',\n          'Roland Mendel',\n          'Catherine Dewey',\n          'Carlos Hern\xe1ndez',\n          'Elizabeth Lincoln',\n          'Art Braunschweiger',\n          'Daniel Tonini',\n          'Carine Schmitt',\n          'Mart\xedn Sommer',\n          'Pedro Afonso',\n        ],\n      },\n      {\n        // For Employee column we return a hard coded list that will always be used including some values NOT in our data set\n        // This is useful if you want to run server searching\n        Scope: {\n          ColumnIds: ['Employee'],\n        },\n        PermittedValues: ['Janet Leverling', 'Robert King', 'Summer Intern'],\n      },\n      {\n        // For Order Date column we return an array with a single empty value - this means that NO values will be used\n        Scope: {\n          ColumnIds: ['OrderDate'],\n        },\n        PermittedValues: [''],\n      },\n      {\n        // For Item Count column we return an array with a single empty value - this means that NO values will be used\n        Scope: {\n          ColumnIds: ['ItemCount'],\n        },\n        PermittedValues: [''],\n      },\n      {\n        // For Customer Reference column we use a function - this allows us to get data from elsewhere if required and do external lookups\n        Scope: {\n          ColumnIds: ['CustomerReference'],\n        },\n        GetColumnValuesFunction: 'PermittedValuesForCustomer',\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n    },\n    columnTypes: {\n      abColDefNumber: {},\n      abColDefString: {},\n      abColDefBoolean: {},\n      abColDefDate: {},\n      abColDefObject: {},\n      abColDefNumberArray: {},\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Permitted Values Demo',\n    userFunctions: [\n      {\n        name: 'PermittedValuesForCustomer',\n        type: 'GetColumnValuesFunction',\n        handler(column: AdaptableColumn) {\n          return ['PRINI', 'SPLIR', 'BOTTM', 'ERNSH', 'HUNGO', 'REGGC'];\n        },\n      },\n    ],\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 12:case"end":return e.stop()}}),e)})));n.default=function(e){return Object(r.useEffect)((function(){g().then((function(n){e.onReady&&e.onReady(n)}))}),[]),null}}}]);