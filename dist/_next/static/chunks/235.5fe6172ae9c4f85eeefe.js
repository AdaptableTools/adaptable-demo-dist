(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[235],{"7tpN":function(n,e,t){"use strict";t.r(e);var o,a=t("q1tI"),r=t("o0o1"),i=t.n(r),s=t("HaE+"),l=(t("nX5y"),t("smsc")),m=t("ThKj"),u=t("rePB"),d=(t("PMha"),t("cUqQ"),t("5TJ6"),t("jWP/"),t("iMsr"),t("mbJ9")),p=t.n(d),C=t("mXS1");function c(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function f(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?c(Object(t),!0).forEach((function(e){Object(u.a)(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}var b={Dashboard:{VisibleButtons:["CalculatedColumn"]},CalculatedColumn:{CalculatedColumns:[{ColumnExpression:"[ItemCost] / [ItemCount]",ColumnId:"AvgCost",FriendlyName:"Avg Item Cost"},{ColumnExpression:"([ItemCost] * [ItemCount])- [PackageCost]",ColumnId:"Profit",FriendlyName:"profit"},{ColumnExpression:'[ItemCost] > 100 ? "High" : [ItemCost] > 50 ? "Medium": "Low"',ColumnId:"Comment",FriendlyName:"Comment",CalculatedColumnSettings:{DataType:"String",Filterable:!0,Groupable:!0,Sortable:!0}},{ColumnExpression:"max([ItemCost], [OrderCost], [InvoicedCost], ([PackageCost]*10))",ColumnId:"HighCost",FriendlyName:"Highest Cost"},{ColumnExpression:"[ShippedDate] > ADD_DAYS([OrderDate] , 21) ? 'Delayed' : 'On time'",ColumnId:"ShipDelay",FriendlyName:"Ship Delay"},{ColumnExpression:"[OrderCost]*0.2",ColumnId:"Tax",FriendlyName:"Tax"}]},ConditionalStyle:{ConditionalStyles:[{Scope:{ColumnIds:["Profit"]},Style:{ForeColor:"#008000"},Expression:"[Profit] > 0"},{Scope:{ColumnIds:["Profit"]},Style:{ForeColor:"#ff0000"},Expression:"[Profit] < 0"}]},FormatColumn:{FormatColumns:[{Scope:{ColumnIds:["AvgCost"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{FractionDigits:2}}},{Scope:{ColumnIds:["HighCost"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{FractionDigits:2}}},{Scope:{ColumnIds:["Profit"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{FractionDigits:4}}},{Scope:{ColumnIds:["Tax"]},DisplayFormat:{Formatter:"NumberFormatter",Options:{Prefix:"$",Suffix:"(20% VAT)",FractionDigits:2}}}]},Layout:{CurrentLayout:"with calc cols",Layouts:[{Columns:["Comment","AvgCost","ItemCost","ItemCount","HighCost","OrderCost","Tax","Profit","PackageCost","InvoicedCost","ShipDelay","OrderDate","ShipCountry"],Name:"with calc cols"},{Columns:["AvgCost","ItemCost","ItemCount","OrderCost","PackageCost","Tax","Profit","OrderDate","ShipCountry"],RowGroupedColumns:["Comment"],Name:"grouped calc cols"}]}},y=function(){var n=Object(s.a)(i.a.mark((function n(e,t){var a;return i.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a={primaryKey:"OrderId",userName:"Demo User",adaptableId:"Calculated Column Demo",predefinedConfig:b,vendorGrid:f(f({},{columnDefs:e,rowData:t,enableRangeSelection:!0,sideBar:!0,suppressMenuHide:!0,autoGroupColumnDef:{sortable:!0},columnTypes:{abColDefNumber:{},abColDefString:{},abColDefBoolean:{},abColDefDate:{},abColDefObject:{},abColDefNumberArray:{}}}),{},{modules:C.a}),queryOptions:{ignoreCaseInQueries:!1}},n.next=4,p.a.init(a);case 4:return o=n.sent,n.abrupt("return",{adaptableOptions:a,adaptableApi:o});case 6:case"end":return n.stop()}}),n)})));return function(e,t){return n.apply(this,arguments)}}(),g=Object(s.a)(i.a.mark((function n(){var e,t,o,a,r;return i.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return(e=new m.a).setUpAgGridLicence(),t=JSON.parse(JSON.stringify(l)),e.convertExcelData(t),o=e.getConditionalstyleNorthwindColumnSchema(),n.next=7,y(o,t);case 7:return a=n.sent,r=a.adaptableOptions,a.adaptableApi,r.vendorGrid.onGridReady=function(n){n.columnApi.autoSizeAllColumns(),setTimeout((function(){return n.columnApi.autoSizeAllColumns()}),1),n.api.addEventListener("newColumnsLoaded",(function(){n.columnApi.autoSizeAllColumns()})),n.api.closeToolPanel()},n.abrupt("return",{code:"import '@adaptabletools/adaptable/index.css';\nimport '@adaptabletools/adaptable/themes/dark.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham-dark.css';\nimport Adaptable from '@adaptabletools/adaptable/agGrid';\nimport { GridOptions } from '@ag-grid-community/all-modules';\nimport {\n  AdaptableOptions,\n  PredefinedConfig,\n  AdaptableApi,\n} from '@adaptabletools/adaptable/types';\nimport { AllEnterpriseModules } from '@ag-grid-enterprise/all-modules';\n\nvar adaptableApi: AdaptableApi;\n\nconst demoConfig: PredefinedConfig = {\n  Dashboard: {\n    VisibleButtons: ['CalculatedColumn'],\n  },\n  CalculatedColumn: {\n    CalculatedColumns: [\n      {\n        ColumnExpression: '[ItemCost] / [ItemCount]',\n        ColumnId: 'AvgCost',\n        FriendlyName: 'Avg Item Cost',\n      },\n      {\n        ColumnExpression: '([ItemCost] * [ItemCount])- [PackageCost]',\n        ColumnId: 'Profit',\n        FriendlyName: 'profit',\n      },\n      {\n        ColumnExpression:\n          '[ItemCost] > 100 ? \"High\" : [ItemCost] > 50 ? \"Medium\": \"Low\"',\n        ColumnId: 'Comment',\n        FriendlyName: 'Comment',\n        CalculatedColumnSettings: {\n          DataType: 'String',\n          Filterable: true,\n          Groupable: true,\n          Sortable: true,\n        },\n      },\n      {\n        ColumnExpression:\n          'max([ItemCost], [OrderCost], [InvoicedCost], ([PackageCost]*10))',\n        ColumnId: 'HighCost',\n        FriendlyName: 'Highest Cost',\n      },\n      {\n        ColumnExpression:\n          \"[ShippedDate] > ADD_DAYS([OrderDate] , 21) ? 'Delayed' : 'On time'\",\n        ColumnId: 'ShipDelay',\n        FriendlyName: 'Ship Delay',\n      },\n      {\n        // we will add the Display Format separately\n        ColumnExpression: '[OrderCost]*0.2',\n        ColumnId: 'Tax',\n        FriendlyName: 'Tax',\n      },\n    ],\n  },\n  ConditionalStyle: {\n    ConditionalStyles: [\n      {\n        Scope: {\n          ColumnIds: ['Profit'],\n        },\n        Style: {\n          ForeColor: '#008000',\n        },\n        Expression: '[Profit] > 0',\n      },\n      {\n        Scope: {\n          ColumnIds: ['Profit'],\n        },\n        Style: {\n          ForeColor: '#ff0000',\n        },\n        Expression: '[Profit] < 0',\n      },\n    ],\n  },\n  FormatColumn: {\n    FormatColumns: [\n      {\n        Scope: {\n          ColumnIds: ['AvgCost'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            FractionDigits: 2,\n          },\n        },\n      },\n      {\n        Scope: {\n          ColumnIds: ['HighCost'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            FractionDigits: 2,\n          },\n        },\n      },\n      {\n        Scope: {\n          ColumnIds: ['Profit'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            FractionDigits: 4,\n          },\n        },\n      },\n      {\n        Scope: {\n          ColumnIds: ['Tax'],\n        },\n        DisplayFormat: {\n          Formatter: 'NumberFormatter',\n          Options: {\n            Prefix: '$',\n            Suffix: '(20% VAT)',\n            FractionDigits: 2,\n          },\n        },\n      },\n    ],\n  },\n  Layout: {\n    CurrentLayout: 'with calc cols',\n    Layouts: [\n      {\n        Columns: [\n          'Comment',\n          'AvgCost',\n          'ItemCost',\n          'ItemCount',\n          'HighCost',\n          'OrderCost',\n          'Tax',\n          'Profit',\n          'PackageCost',\n          'InvoicedCost',\n          'ShipDelay',\n          'OrderDate',\n          'ShipCountry',\n        ],\n        Name: 'with calc cols',\n      },\n      {\n        Columns: [\n          'AvgCost',\n          'ItemCost',\n          'ItemCount',\n          'OrderCost',\n          'PackageCost',\n          'Tax',\n          'Profit',\n          'OrderDate',\n          'ShipCountry',\n        ],\n        RowGroupedColumns: ['Comment'],\n        Name: 'grouped calc cols',\n      },\n    ],\n  },\n} as PredefinedConfig;\n\nexport default async (columnDefs: any[], rowData: any[]) => {\n  const gridOptions: GridOptions = {\n    columnDefs,\n    rowData,\n    enableRangeSelection: true,\n    sideBar: true,\n    suppressMenuHide: true,\n    autoGroupColumnDef: {\n      sortable: true,\n    },\n    columnTypes: {\n      abColDefNumber: {},\n      abColDefString: {},\n      abColDefBoolean: {},\n      abColDefDate: {},\n      abColDefObject: {},\n      abColDefNumberArray: {},\n    },\n  };\n\n  const adaptableOptions: AdaptableOptions = {\n    primaryKey: 'OrderId',\n    userName: 'Demo User',\n    adaptableId: 'Calculated Column Demo',\n    predefinedConfig: demoConfig,\n    vendorGrid: { ...gridOptions, modules: AllEnterpriseModules },\n    queryOptions: {\n      ignoreCaseInQueries: false,\n    },\n  };\n  adaptableApi = await Adaptable.init(adaptableOptions);\n\n  return { adaptableOptions, adaptableApi };\n};\n"});case 12:case"end":return n.stop()}}),n)})));e.default=function(n){return Object(a.useEffect)((function(){g().then((function(e){n.onReady&&n.onReady(e)}))}),[]),null}}}]);